funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 3, NA_Check = 0.9)
funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 5, NA_Check = 0.9)
funds <- readxl::read_xlsx("data/MAD .xlsx")
source("code/Statistics.R")
funds <- funds %>%
gather(Tickers, Value, -Date) %>%
arrange(Date) %>% group_by(Tickers) %>%
mutate(Ret = Value/lag(Value)-1) %>%
mutate(Ret =coalesce(Ret,0)) %>%
ungroup()
BM <- "TUKXG"
funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 1, NA_Check = 0.9)
funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 3, NA_Check = 0.9)
funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 5, NA_Check = 0.9)
One_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 1, NA_Check = 0.9)
Three_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 3, NA_Check = 0.9)
Five_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 5, NA_Check = 0.9)
kable(One_year)
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
library(tbl2xts)
library(tidyverse)
library(xts)
source("code/EXCESSRETURN.R")
source("code/EXCESSRETURN2.R")
library(quantmod)
df <- readxl::read_xlsx("data/MAD .xlsx")
# get all permutatation
A <- df %>% MY_excess_return(.,"FUDP", "TUKXG")
B <- df %>% MY_excess_return(., "M2EFDY", "GDUEEGF")
C <- df %>% MY_excess_return(., "M2EUGDY", "GDDUE15X")
D <- df %>% MY_excess_return(., "M2GBDY", "GDDUUK")
E <- df %>% MY_excess_return(., "M2JPDY", "TJDIVD")
F1 <- df %>% MY_excess_return(., "M2USADVD", "GDDUUS")
G <- df %>% MY_excess_return(., "M2WDHDVD", "GDDUWI")
H <- df %>% MY_excess_return(., "SPDAEET", "SPTR350E")
I <- df %>% MY_excess_return(., "SPDAUDT", "SPXT")
J <- df %>% MY_excess_return(., "SPJXDAJT", "TPXDDVD")
K <- df %>% MY_excess_return(., "SPSADAZT", "JALSH")
L <- df %>% MY_excess_return(., "TJDIVD", "JALSH")
joined_df <- bind_cols(A, B, C, D, E, F1, G, H, I, J, K, L)
compare <- joined_df %>% select(date...1, FUDP, M2EFDY, M2EUGDY, M2GBDY, M2JPDY, M2USADVD, M2WDHDVD, SPDAEET, SPDAUDT, SPJXDAJT, SPSADAZT, TJDIVD) %>% gather(Index , Return , -date...1)
plot <- compare %>% ggplot(aes(x = date...1, y = Return)) +
geom_line() +
labs(x = "Date", y = "Return") +
theme_minimal() +
facet_wrap(~ Index, scales = "free_y", ncol = 4)
plot
View(MY_excess_return_2)
funds <- readxl::read_xlsx("data/MAD .xlsx")
source("code/Statistics.R")
source("code/SmallerStatsTable.R")
funds <- funds %>%
gather(Tickers, Value, -Date) %>%
arrange(Date) %>% group_by(Tickers) %>%
mutate(Ret = Value/lag(Value)-1) %>%
mutate(Ret =coalesce(Ret,0)) %>%
ungroup()
BM <- "TUKXG"
One_year <- funds %>% Moments_comp(., BM = BM, Yrs_LookBack = 1, NA_Check = 0.9)
View(Moments_comp)
Three_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 3, NA_Check = 0.9)
One_year <- funds %>% Moments_comp(., BM = BM, Yrs_LookBack = 1, NA_Check = 0.9)
One_year <- funds %>% Moments_comp(., BM = BM, Yrs_LookBack = 1, NA_Check = 0.9)
Moments_comp <- function(funds, BM, Yrs_LookBack, NA_Check){
funds_considered <-
funds %>% filter(Date >= fmxdat::safe_year_min(datesel = last(Date), N = Yrs_LookBack))
Funds_Cons <-
funds_considered %>%
group_by(Tickers) %>%
summarise(N_noNA = sum(!is.na(Ret)) / length(unique(funds_considered$Date)) ) %>%
filter(N_noNA > NA_Check) %>% pull(Tickers)
Fundxts <-
funds_considered %>% filter(Tickers %in% Funds_Cons) %>%
tbl2xts::tbl_xts(cols_to_xts = Ret, spread_by = Tickers, Colnames_Exact = T)
BMxts <-
funds_considered %>% filter(Tickers %in% BM) %>%
tbl_xts(cols_to_xts = Ret, Colnames_Exact = T)
library(PerformanceAnalytics)
Moms <-
bind_rows(
data.frame(Return.cumulative(Fundxts) ) %>% round(., 3),
data.frame(Return.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
data.frame(PerformanceAnalytics::Return.annualized.excess(Fundxts, BMxts) ) %>% round(., 3),
data.frame(sd.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
data.frame(PerformanceAnalytics::AdjustedSharpeRatio( Fundxts ) ) %>% round(., 3),
data.frame(AverageDrawdown(Fundxts, scale = 12)) %>% round(., 3),
) %>%
tibble::rownames_to_column("Info") %>%
mutate(Period = glue::glue("Last {Yrs_LookBack} Years"), Info = c("Cum Returns", "Returns (Ann.)", "Returns Excess (Ann.)", "SD (Ann.)", "Adj. Sharpe Ratio",
"Avg DD")) %>%
relocate(Period, .before = Info) %>% as_tibble()
# This line replaces the `.` with a space.
# Note the forward slashes, as `.` there means everything, `\\.` means a full-stop
colnames(Moms) <- gsub("\\.", " ", colnames(Moms))
Moms
}
source("~/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/code/SmallerStatsTable.R")
funds <- readxl::read_xlsx("data/MAD .xlsx")
source("code/Statistics.R")
source("code/SmallerStatsTable.R")
funds <- funds %>%
gather(Tickers, Value, -Date) %>%
arrange(Date) %>% group_by(Tickers) %>%
mutate(Ret = Value/lag(Value)-1) %>%
mutate(Ret =coalesce(Ret,0)) %>%
ungroup()
BM <- "TUKXG"
One_year <- funds %>% Moments_comp(., BM = BM, Yrs_LookBack = 1, NA_Check = 0.9)
Three_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 3, NA_Check = 0.9)
Five_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 5, NA_Check = 0.9)
kable(One_year)
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
library(tbl2xts)
library(tidyverse)
library(xts)
source("code/EXCESSRETURN.R")
source("code/EXCESSRETURN2.R")
library(quantmod)
df <- readxl::read_xlsx("data/MAD .xlsx")
# get all permutatation
A <- df %>% MY_excess_return(.,"FUDP", "TUKXG")
B <- df %>% MY_excess_return(., "M2EFDY", "GDUEEGF")
C <- df %>% MY_excess_return(., "M2EUGDY", "GDDUE15X")
D <- df %>% MY_excess_return(., "M2GBDY", "GDDUUK")
E <- df %>% MY_excess_return(., "M2JPDY", "TJDIVD")
F1 <- df %>% MY_excess_return(., "M2USADVD", "GDDUUS")
G <- df %>% MY_excess_return(., "M2WDHDVD", "GDDUWI")
H <- df %>% MY_excess_return(., "SPDAEET", "SPTR350E")
I <- df %>% MY_excess_return(., "SPDAUDT", "SPXT")
J <- df %>% MY_excess_return(., "SPJXDAJT", "TPXDDVD")
K <- df %>% MY_excess_return(., "SPSADAZT", "JALSH")
L <- df %>% MY_excess_return(., "TJDIVD", "JALSH")
joined_df <- bind_cols(A, B, C, D, E, F1, G, H, I, J, K, L)
compare <- joined_df %>% select(date...1, FUDP, M2EFDY, M2EUGDY, M2GBDY, M2JPDY, M2USADVD, M2WDHDVD, SPDAEET, SPDAUDT, SPJXDAJT, SPSADAZT, TJDIVD) %>% gather(Index , Return , -date...1)
plot <- compare %>% ggplot(aes(x = date...1, y = Return)) +
geom_line() +
labs(x = "Date", y = "Return") +
theme_minimal() +
facet_wrap(~ Index, scales = "free_y", ncol = 4)
plot
funds <- readxl::read_xlsx("data/MAD .xlsx")
source("code/Statistics.R")
source("code/SmallerStatsTable.R")
funds <- funds %>%
gather(Tickers, Value, -Date) %>%
arrange(Date) %>% group_by(Tickers) %>%
mutate(Ret = Value/lag(Value)-1) %>%
mutate(Ret =coalesce(Ret,0)) %>%
ungroup()
BM <- "TUKXG"
One_year <- funds %>% Moments_comp(., BM = BM, Yrs_LookBack = 1, NA_Check = 0.9)
Three_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 3, NA_Check = 0.9)
Five_year <- funds %>% Moments_Comp(., BM = BM, Yrs_LookBack = 5, NA_Check = 0.9)
kable(One_year)
library(knitr)
Table_data <- readxl::read_xlsx("data/Instruments from MAD.xlsx")
knitr::kable(Table_data)
kable(One_year)
x <- tibble(Random = rnorm(100))
while( max(x$Random) < 3){
x <- bind_cols(x, Another_Random = rnorm(100, 1, 0.1))
x$Random <- x$Random * x$Another_Random
x <- x[,-2]
print(max(x$Random))
}
source("code/rollingstarnddev.R")
# get vol data from yahoo
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
VIX <- vol_data %>% select(Date, VIX)
# get vol data from yahoo
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
VIX <- vol_data %>% select(Date, VIX)
library(tidyverse)
# get vol data from yahoo
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, JALSHVOL)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
Vixroll <- Rolling_sd(VIX ,"VIX")
# get the top quartile and bottom quartile
stratifier <- function(df) {
df <- mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
df
}
strat_df <-
Roll.sd %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# get vol data from yahoo
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, JALSHVOL)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
Vixroll <- Rolling_sd(VIX ,"VIX")
# get the top quartile and bottom quartile
stratifier <- function(df) {
df <- mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
df
}
strat_df <-
Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(date)
View(strat_df)
# get vol data from yahoo
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, JALSHVOL)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
Vixroll <- Rolling_sd(VIX ,"VIX")
# get the top quartile and bottom quartile
stratifier <- function(df) {
df <- mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
df
}
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(date)
strat_df %>% filter(Strat %in% "HiVol")
hivol_per_vector <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
Vixroll %>%  stratifier(.)
Vixroll %>%  stratifier(.)
Vixroll
stratifier(Vixroll)
strat_df
Vixroll <- Rolling_sd(V2X ,"V2X")
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector_eu  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_eu  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
JSV
Vixroll <- Rolling_sd(JSV ,"JALSHVOL")
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector_sa <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_sa <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
excessreturns_us <- list( F1, I ,J) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
A <- df %>% simple_excess_return(.,"FUDP", "TUKXG")
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
library(tbl2xts)
library(tidyverse)
library(xts)
source("code/EXCESSRETURN.R")
source("code/monthlyreturns.R")
library(quantmod)
source("code/uncompoundedexcess.R")
source("code/simpleexcessreturn.R")
df <- readxl::read_xlsx("data/MAD .xlsx")
# get all permutatation
A <- df %>% MY_excess_return(.,"FUDP", "TUKXG")
B <- df %>% MY_excess_return(., "M2EFDY", "GDUEEGF")
C <- df %>% MY_excess_return(., "M2EUGDY", "GDDUE15X")
D <- df %>% MY_excess_return(., "M2GBDY", "GDDUUK")
E <- df %>% MY_excess_return(., "M2JPDY", "TJDIVD")
F1 <- df %>% MY_excess_return(., "M2USADVD", "GDDUUS")
G <- df %>% MY_excess_return(., "M2WDHDVD", "GDDUWI")
H <- df %>% MY_excess_return(., "SPDAEET", "SPTR350E")
I <- df %>% MY_excess_return(., "SPDAUDT", "SPXT")
J <- df %>% MY_excess_return(., "SPJXDAJT", "TPXDDVD")
K <- df %>% MY_excess_return(., "SPSADAZT", "JALSH")
L <- df %>% MY_excess_return(., "TJDIVD", "JALSH")
#  cumulative excess returns in a single data frame
compare <- list(A, B, C, D, E, F1, G,H,J, K, L) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
plot <- compare %>% ggplot(aes(x = date, y = excess)) +
geom_line() +
labs(x = "Date", y = "Return") +
theme_minimal() +
facet_wrap(~ ticker, scales = "free_y", ncol = 4)+
labs(
title = "Cumulative Excess Returns",
subtitle = "Performance of HY and DGPS portfolios globally",
x = "",
y = "Cum Returns",
caption = "Source: Bloomberg"
)
plot
# Now for standard deviation
# get vol data from yahoo
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, JALSHVOL)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
# US
Vixroll <- Rolling_sd(VIX ,"VIX")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# US strat
hivol_per_vector_us <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_us <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# Europe strat
Vixroll <- Rolling_sd(V2X ,"V2X")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector_eu  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_eu  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# SA
Vixroll <- Rolling_sd(JSV ,"JALSHVOL")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector_sa <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_sa <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# get entire returns and apply the vector above
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# get all permutatation
A <- df %>% simple_excess_return(.,"FUDP", "TUKXG")
B <- df %>% simple_excess_return(., "M2EFDY", "GDUEEGF")
C <- df %>% simple_excess_return(., "M2EUGDY", "GDDUE15X")
D <- df %>% simple_excess_return(., "M2GBDY", "GDDUUK")
E <- df %>% simple_excess_return(., "M2JPDY", "TJDIVD")
F1 <- df %>% simple_excess_return(., "M2USADVD", "GDDUUS")
G <- df %>% simple_excess_return(., "M2WDHDVD", "GDDUWI")
H <- df %>% simple_excess_return(., "SPDAEET", "SPTR350E")
I <- df %>% simple_excess_return(., "SPDAUDT", "SPXT")
J <- df %>% simple_excess_return(., "SPJXDAJT", "TPXDDVD")
K <- df %>% simple_excess_return(., "SPSADAZT", "JALSH")
L <- df %>% simple_excess_return(., "TJDIVD", "JALSH")
#  US excess return
excessreturns_us <- list( F1, I ,J) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
# EU  excess return
excessreturns_eu <- list(A, C, D, H) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
#  SA excess returns in a single data frame
excessreturns_em <- list(B, K, L) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
# US stat df
hivol <- excessreturns %>%
filter(date %in% hivol_per_vector) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
hivol <- excessreturns_us %>%
filter(Date %in% hivol_per_vector) %>%
filter(Date >= fmxdat::safe_month_min(last(Date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
hivol <- excessreturns_us %>%
filter(Date %in% hivol_per_vector_us) %>%
filter(Date >= fmxdat::safe_month_min(last(Date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
excessreturns_em
excessreturns_us %>%
filter(Date %in% hivol_per_vector_us) %>%
filter(Date >= fmxdat::safe_month_min(last(Date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
excessreturns_em
excessreturns_us %>%
filter(date %in% hivol_per_vector_us) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
hivol
hivol <- excessreturns_us %>%
filter(date %in% hivol_per_vector_us) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
hivol
hivol
Usvolcom <- left_join(hivol, lovol, by = ticker)
lovol <-  excessreturns_us %>%
filter(date %in% lovol_per_vector_us) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
Usvolcom <- left_join(hivol, lovol, by = ticker)
lovol
hivol <- excessreturns_us %>%
filter(date %in% hivol_per_vector_us) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_us %>%
filter(date %in% lovol_per_vector_us) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
Usvolcom <- left_join(hivol, lovol, by = "ticker")
# EU strat df
hivol <- excessreturns_eu %>%
filter(date %in% hivol_per_vector_eu) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_eu %>%
filter(date %in% lovol_per_vector_eu) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
euvolcom <- left_join(hivol, lovol, by = "ticker")
# EM strat df
hivol <- excessreturns_em %>%
filter(date %in% hivol_per_vector_sa) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_em %>%
filter(date %in% lovol_per_vector_sa) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
emvolcom <- left_join(hivol, lovol, by = "ticker")
euvolcom
emvolcom
bind_rows(Usvolcom, euvolcom, emvolcom)
divi_vol_df <- bind_rows(Usvolcom, euvolcom, emvolcom)
divi_vol_df %>%
mutate(trend = case_when(
Hivol_return > lovol_return ~ "higher",
TRUE ~ "lower"
))
divi_vol_df  <- divi_vol_df %>%
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "higher",
TRUE ~ "lower"
))
divi_vol_df
divi_vol_df  <- divi_vol_df %>%
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "gives more protection in high volatility periods",
TRUE ~ "gives lower protection in high volatility periods"
))
kable( volreturns)
Table_data <- readxl::read_xlsx("data/Instruments from MAD.xlsx")
library(knitr)
kable(Table_data)
kable(divi_vol_df)
divi_vol_df  <- divi_vol_df %>%
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "high protection",
TRUE ~ "low protection"
))
kable(divi_vol_df)
divi_vol_df %>%
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "high protection",
TRUE ~ "low protection"
))
interest <- readxl::read_xlsx("data/Interest Rates.xlsx")
interest
mutate(Volatility_Protection = case_when(
+     Hivol_return > lovol_return ~ "high protection",
+     TRUE ~ "low protection"
+   )))
mutate(Volatility_Protection = case_when(
+     Hivol_return > lovol_return ~ "high protection",
+     TRUE ~ "low protection"
+   ))
kable(divi_vol_df)
mutate(Volatility_Protection = case_when(
+     Hivol_return > lovol_return ~ "high",
+     TRUE ~ "low"
+   )))
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "high protection",
TRUE ~ "low protection"
))
mutate(Volatility_Protection = case_when(
hivol_return > lovol_return ~ "high protection",
TRUE ~ "low protection"
))
divi_vol_df
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "high protection",
TRUE ~ "low protection"
))
