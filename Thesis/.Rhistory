filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
Usvolcom <- left_join(hivol, lovol, by = "ticker")
# EU strat df
hivol <- excessreturns_eu %>%
filter(date %in% hivol_per_vector_eu) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_eu %>%
filter(date %in% lovol_per_vector_eu) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
euvolcom <- left_join(hivol, lovol, by = "ticker")
# EM strat df
hivol <- excessreturns_em %>%
filter(date %in% hivol_per_vector_sa) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_em %>%
filter(date %in% lovol_per_vector_sa) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
emvolcom <- left_join(hivol, lovol, by = "ticker")
divi_vol_df <- bind_rows(Usvolcom, euvolcom, emvolcom)
divi_vol_df  <- divi_vol_df %>%
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "higher",
TRUE ~ "lower"
))
divi_vol_df
interest <- readxl::read_xlsx("data/Interest Rates.xlsx")
library(tidyverse)
library(tbl2xts)
library(lubridate)
interest <- interest %>%
rename(., "Fed" = "US Federal Funds Effective Rate (continuous series)" , "ECB" = "ECB Main Refinancing Operations Announcement Rate", "SA" = "South Africa Repo Avg Rate")
#  tidy it up first
tidy_interest <- interest %>%
gather(Bank, Rate, -Date) %>%
mutate( Month = format(Date, "%b"), YM = format(Date, "%b %y")) %>%
arrange(Date) %>%
group_by(Bank) %>%
ungroup()
#  subset dates to just consider the quarterly figures
quarters <- c("Mar", "Jun", "Sep", "Dec")
#  With that subset of interest rates now use if else and group by date to count times when there was a hiking or cutting
rateschanges <- tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
sum(diff > 0, na.rm = TRUE) > 4 ~ "Hiking",
sum(diff < 0, na.rm = TRUE) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
) %>%
ungroup()
# extract the dates
source("code/regimeextractor.R")
sa_rate_high_vol <- rateschanges %>%
regime_date_extractor(. , Regime = "Hiking", Bank = "Fed") %>% as.Date() %>% unique()
#  now lets get its return, use the same df from the other vol stratification
regime_return <- function (df, filter_vector ){
df <- df %>%
gather(Index, Price, -Date) %>%
arrange(Date) %>%
mutate(YM = format(Date , "%y %b ")) %>%
group_by(Index) %>%
mutate(Ret = Price / lag(Price)) %>%
# this should be a variable
filter(Date %in% filter_vector) %>%
#  get a vector of all indices
mutate(Year = format(Date, "%y")) %>%
group_by(Index) %>%
mutate(Count = n())
df}
df %>% regime_return (., sa_rate_high_vol)
market_cycle_df <- function(df){
interest <- df %>%
rename(., "Fed" = "US Federal Funds Effective Rate (continuous series)" , "ECB" = "ECB Main Refinancing Operations Announcement Rate", "SA" = "South Africa Repo Avg Rate")
#  tidy it up first
tidy_interest <- interest %>%
gather(Bank, Rate, -Date) %>%
mutate( Month = format(Date, "%b"), YM = format(Date, "%b %y")) %>%
arrange(Date) %>%
group_by(Bank) %>%
ungroup()
#  subset dates to just consider the quarterly figures
quarters <- c("Mar", "Jun", "Sep", "Dec")
#  With that subset of interest rates now use if else and group by date to count times when there was a hiking or cutting
rateschanges <- tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
sum(diff > 0, na.rm = TRUE) > 4 ~ "Hiking",
sum(diff < 0, na.rm = TRUE) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
) %>%
ungroup()
}
interest %>% market_cycle_df(.)
interest <- readxl::read_xlsx("data/Interest Rates.xlsx")
library(tidyverse)
library(tbl2xts)
library(lubridate)
market_cycle_df <- function(df){
interest <- df %>%
rename(., "Fed" = "US Federal Funds Effective Rate (continuous series)" , "ECB" = "ECB Main Refinancing Operations Announcement Rate", "SA" = "South Africa Repo Avg Rate")
#  tidy it up first
tidy_interest <- interest %>%
gather(Bank, Rate, -Date) %>%
mutate( Month = format(Date, "%b"), YM = format(Date, "%b %y")) %>%
arrange(Date) %>%
group_by(Bank) %>%
ungroup()
#  subset dates to just consider the quarterly figures
quarters <- c("Mar", "Jun", "Sep", "Dec")
#  With that subset of interest rates now use if else and group by date to count times when there was a hiking or cutting
rateschanges <- tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
sum(diff > 0, na.rm = TRUE) > 4 ~ "Hiking",
sum(diff < 0, na.rm = TRUE) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
) %>%
ungroup()
}
interest %>% market_cycle_df(.)
# extract the dates
source("code/regimeextractor.R")
sa_rate_high_vol <- rateschanges %>%
regime_date_extractor(. , Regime = "Hiking", Bank = "Fed") %>% as.Date() %>% unique()
#  now lets get its return, use the same df from the other vol stratification
regime_return <- function (df, filter_vector ){
df <- df %>%
gather(Index, Price, -Date) %>%
arrange(Date) %>%
mutate(YM = format(Date , "%y %b ")) %>%
group_by(Index) %>%
mutate(Ret = Price / lag(Price)) %>%
# this should be a variable
filter(Date %in% filter_vector) %>%
#  get a vector of all indices
mutate(Year = format(Date, "%y")) %>%
group_by(Index) %>%
mutate(Count = n())
df}
interest %>% market_cycle_df(.)
interest %>% market_cycle_df(.)
interest
interest
interest %>% market_cycle_df(.)
market_cycle_df <- function(df){
interest <- df %>%
rename(., "Fed" = "US Federal Funds Effective Rate (continuous series)" , "ECB" = "ECB Main Refinancing Operations Announcement Rate", "SA" = "South Africa Repo Avg Rate")
#  tidy it up first
tidy_interest <- interest %>%
gather(Bank, Rate, -Date) %>%
mutate( Month = format(Date, "%b"), YM = format(Date, "%b %y")) %>%
arrange(Date) %>%
group_by(Bank) %>%
ungroup()
#  subset dates to just consider the quarterly figures
quarters <- c("Mar", "Jun", "Sep", "Dec")
#  With that subset of interest rates now use if else and group by date to count times when there was a hiking or cutting
rateschanges <- tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
sum(diff > 0, na.rm = TRUE) > 4 ~ "Hiking",
sum(diff < 0, na.rm = TRUE) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
) %>%
ungroup()
rateschanges
}
source("code/MarketCycledf.R")
interest %>% market_cycle_df(.)
df %>% regime_return(., sa_rate_high_vol)
regime_return <- function (df, filter_vector ){
df <- df %>%
gather(Index, Price, -Date) %>%
arrange(Date) %>%
mutate(YM = format(Date , "%y %b ")) %>%
group_by(Index) %>%
mutate(Ret = Price / lag(Price)) %>%
# this should be a variable
filter(Date %in% filter_vector) %>%
#  get a vector of all indices
mutate(Year = format(Date, "%y")) %>%
group_by(Index) %>%
mutate(Count = n()) %>%
group_by(Index) %>%
summarise(Excess_Return = prod(1+ Ret, na.rm=T) ^ (12/(Count)) -1 )
df}
df %>% regime_return(., sa_rate_high_vol)
regime_return <- function (df, filter_vector ){
df <- df %>%
gather(Index, Price, -Date) %>%
arrange(Date) %>%
mutate(YM = format(Date , "%y %b ")) %>%
group_by(Index) %>%
mutate(Ret = Price / lag(Price)) %>%
# this should be a variable
filter(Date %in% filter_vector) %>%
#  get a vector of all indices
mutate(Year = format(Date, "%y")) %>%
group_by(Index) %>%
mutate(Count = n()) %>%
summarise(Excess_Return = prod(1+ Ret, na.rm=T) ^ (12/(Count)) -1 )
df}
df %>% regime_return(., sa_rate_high_vol)
sa_rate_high_vol
#  now lets get its return, use the same df from the other vol stratification
df
#  now lets get its return, use the same df from the other vol stratification
combined_simple
vol_date_vector <- rateschanges %>%
regime_date_extractor(. , Regime = "Hiking", Bank = "Fed") %>% as.Date() %>% unique()
combined_simple
combined_simple %>%
filter(date %in% vol_date_vector) %>%
group_by(date, ticker) %>%
mutate(Periodicy = n()) %>%
# lets annulize accroding to periodicity
summarise(Annualized_Return = prod(1+excess, na.rm=T) ^ (12/(Periodicy)) -1 ) %>%
ungroup
combined_simple %>% arrange(date)
combined_simple %>% arrange(date) %>%
filter(date %in% vol_date_vector)
vol_date_vector <- rateschanges %>%
regime_date_extractor(. , Regime = "Hiking", Bank = "Fed") %>% as.Date() %>% unique()
combined_simple %>% arrange(date) %>%
filter(date %in% vol_date_vector)
vol_date_vector
combined_simple %>% arrange(date)
combined_simple %>% arrange(date) %>%
filter( vol_date_vector %in% date)
combined_simple %>% arrange(date) %>%
filter(date %in% vol_date_vector)
rateschanges %>%
regime_date_extractor(. , Regime = "Hiking", Bank = "Fed") %>% as.Date() %>% unique()
rateschanges %>%
regime_date_extractor(. , Regime = "Cutting", Bank = "Fed") %>% as.Date() %>% unique()
View(regime_date_extractor)
divi_vol_df
View(regime_date_extractor)
excessreturns_us
rateschanges
interest
View(market_cycle_df)
?sum
quarters <- c("Mar", "Jun", "Sep", "Dec")
#  With that subset of interest rates now use if else and group by date to count times when there was a hiking or cutting
rateschanges <- tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
count(diff > 0, na.rm = TRUE) > 4 ~ "Hiking",
count(diff < 0, na.rm = TRUE) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
interest <- interest %>%
interest <- interest %>%
gather(Bank, Rate, -Date) %>%
mutate( Month = format(Date, "%b"), YM = format(Date, "%b %y")) %>%
arrange(Date) %>%
group_by(Bank) %>%
ungroup()
#  subset dates to just consider the quarterly figures
quarters <- c("Mar", "Jun", "Sep", "Dec")
#  With that subset of interest rates now use if else and group by date to count times when there was a hiking or cutting
rateschanges <- tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
count(diff > 0, na.rm = TRUE) > 4 ~ "Hiking",
count(diff < 0, na.rm = TRUE) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
) %>%
ungroup()
tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
count(diff > 0) > 4 ~ "Hiking",
count(diff < 0) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
)
tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
sum(diff > 0) > 4 ~ "Hiking",
sum(diff < 0) > 4 ~ "Cutting",
TRUE ~ "Hold"
)
)
tidy_interest %>%
group_by (YM, Bank) %>%
filter(Date == last(Date)) %>%
filter(Month %in% quarters) %>%
arrange(Date) %>%
group_by(Bank) %>%
mutate(diff = Rate - lag(Rate)) %>%
mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
mutate(
Changes = case_when(
sum(diff > 0) > 3 ~ "Hiking",
sum(diff < 0) > 3 ~ "Cutting",
TRUE ~ "Hold"
)
) %>%
ungroup()
rateschanges
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(gt)
library(tidyverse)
library(huxtable)
library(kableExtra)
pacman::p_load("TTR")
pacman::p_load("tidyr", "tbl2xts","devtools","lubridate", "readr", "PerformanceAnalytics", "ggplot2", "dplyr")
data <- readxl::read_xlsx("data/MAD .xlsx")
# Notice that as you are working in a .Rproj file (I am assuming you are) - the relative paths of your directories start at your specified root.
# This means that when working in a .Rproj file, you never need to use getwd() - it is assumed as your base root automatically.
divi_vol_df
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, JALSHVOL)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
# US
Vixroll <- Rolling_sd(VIX ,"VIX")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# US strat
hivol_per_vector_us <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_us <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# Europe strat
Vixroll <- Rolling_sd(V2X ,"V2X")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector_eu  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_eu  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# SA
Vixroll <- Rolling_sd(JSV ,"JALSHVOL")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
hivol_per_vector_sa <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_sa <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# get entire returns and apply the vector above
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# get all permutatation
A <- df %>% simple_excess_return(.,"FUDP", "TUKXG")
B <- df %>% simple_excess_return(., "M2EFDY", "GDUEEGF")
C <- df %>% simple_excess_return(., "M2EUGDY", "GDDUE15X")
D <- df %>% simple_excess_return(., "M2GBDY", "GDDUUK")
E <- df %>% simple_excess_return(., "M2JPDY", "TJDIVD")
F1 <- df %>% simple_excess_return(., "M2USADVD", "GDDUUS")
G <- df %>% simple_excess_return(., "M2WDHDVD", "GDDUWI")
H <- df %>% simple_excess_return(., "SPDAEET", "SPTR350E")
I <- df %>% simple_excess_return(., "SPDAUDT", "SPXT")
J <- df %>% simple_excess_return(., "SPJXDAJT", "TPXDDVD")
K <- df %>% simple_excess_return(., "SPSADAZT", "JALSH")
L <- df %>% simple_excess_return(., "TJDIVD", "JALSH")
combined_simple<- list(A, B, C, D, E, F1, G,H,J, K, L) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
#  US excess return
excessreturns_us <- list( F1, I ,J) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
# EU  excess return
excessreturns_eu <- list(A, C, D, H) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
#  SA excess returns in a single data frame
excessreturns_em <- list(B, K, L) %>%
reduce(inner_join, by='date') %>% gather(ticker, excess, -date)
# US stat df
hivol <- excessreturns_us %>%
filter(date %in% hivol_per_vector_us) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_us %>%
filter(date %in% lovol_per_vector_us) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
Usvolcom <- left_join(hivol, lovol, by = "ticker")
# EU strat df
hivol <- excessreturns_eu %>%
filter(date %in% hivol_per_vector_eu) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_eu %>%
filter(date %in% lovol_per_vector_eu) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
euvolcom <- left_join(hivol, lovol, by = "ticker")
# EM strat df
hivol <- excessreturns_em %>%
filter(date %in% hivol_per_vector_sa) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(Hivol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
lovol <-  excessreturns_em %>%
filter(date %in% lovol_per_vector_sa) %>%
filter(date >= fmxdat::safe_month_min(last(date), N = 36)) %>%
group_by(ticker) %>%
summarise(lovol_return = prod(1+excess, na.rm=T) ^ (12/(36)) -1 )
emvolcom <- left_join(hivol, lovol, by = "ticker")
divi_vol_df <- bind_rows(Usvolcom, euvolcom, emvolcom)
divi_vol_df  <- divi_vol_df %>%
mutate(Volatility_Protection = case_when(
Hivol_return > lovol_return ~ "higher",
TRUE ~ "lower"
))
divi_vol_df
table <- xtable(divi_vol_df, caption = "previous studies \\label{tab1}")
library(xtable)
xtable(divi_vol_df, caption = "previous studies \\label{tab1}")
print.xtable(table,
tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.3,
comment = FALSE,
caption.placement = 'bottom'
)
