UK_df %>% colnames
UK_df %>% MY_excess_return(., "UK_HY", "UK") %>% MY_excess_return("UK_HY_B", "UK_B")
UK_df %>% colnames
UK_df %>% MY_excess_return(., "UK_HY", "UK") %>% MY_excess_return(., "UK_HY_B", "UK_B")
UK_df %>% MY_excess_return(., "UK_HY", "UK")
UK_df %>% MY_excess_return(., "UK_HY_B", "UK_B")
A <- UK_df %>% MY_excess_return(., "UK_HY", "UK")
B <- UK_df %>% MY_excess_return(., "UK_HY_B", "UK_B")
UK <- left_join(A, B, date)
UK <- left_join(A, B, "date")
UK
US_df %>% colnames
EY_df %>% colnames
EU_df %>% colnames
JP_df %>% colnames
EM_df %>% colnames
SA_df %>% colnames
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
original_df <- readxl::read_xlsx("data/MAD .xlsx")
#  change the column names for ease of analysis
geographical_codenames <- c("UK_HY", "EM_HY", "UK", "EM", "UK_HY_B", "UK_B", "JP_HY", "EU", "US_HY", "US", "W_HY", "W", "EU_DG", "EU_2", "JP_DG", "US_DG", "US_2", "JP", "SA_DG", "SA", "SA_HY", "EU_HY")
colnames(original_df)[2:23] <- geographical_codenames
#  lets get different regional data sets to analysze independently then later join
UK_df <- original_df %>% .[, grepl("UK|Date", colnames(.)) ]
US_df <- original_df %>% .[, grepl("US|Date", colnames(.)) ]
EU_df <- original_df %>% .[, grepl("EU|Date", colnames(.)) ]
EM_df <- original_df %>% .[, grepl("EM|Date", colnames(.)) ]
JP_df <- original_df %>% .[, grepl("JP|Date", colnames(.)) ]
SA_df <- original_df %>% .[, grepl("SA|Date", colnames(.)) ]
#  Lets start the analyses
source("code/simpleexcessreturn.R")
source("code/EXCESSRETURN.R")
library(glue)
#  just simple excess returns
A <- UK_df %>% MY_excess_return(., "UK_HY", "UK")
B <- UK_df %>% MY_excess_return(., "UK_HY_B", "UK_B")
UK <- left_join(A, B, "date")
A <- US_df %>% MY_excess_return(., "US_HY", "US")
B <- US_df %>% MY_excess_return(., "US_DG", "US_2")
US <- left_join(A, B, "date")
A <- EU_df %>% MY_excess_return(., "EU_HY", "EU")
B <- EU_df %>% MY_excess_return(., "EU_DG", "EU_2")
EU <- left_join(A, B, "date")
A <- JP_df %>% MY_excess_return(., "JP_HY", "JP")
B <- JP_df %>% MY_excess_return(., "JP_DG", "JP")
JP <- left_join(A, B, "date")
EM <- US_df %>% MY_excess_return(., "EM_HY", "EM")
source("code/simpleexcessreturn.R")
source("code/EXCESSRETURN.R")
library(glue)
#  just simple excess returns
A <- UK_df %>% MY_excess_return(., "UK_HY", "UK")
B <- UK_df %>% MY_excess_return(., "UK_HY_B", "UK_B")
UK <- left_join(A, B, "date")
A <- US_df %>% MY_excess_return(., "US_HY", "US")
B <- US_df %>% MY_excess_return(., "US_DG", "US_2")
US <- left_join(A, B, "date")
A <- EU_df %>% MY_excess_return(., "EU_HY", "EU")
B <- EU_df %>% MY_excess_return(., "EU_DG", "EU_2")
EU <- left_join(A, B, "date")
A <- JP_df %>% MY_excess_return(., "JP_HY", "JP")
B <- JP_df %>% MY_excess_return(., "JP_DG", "JP")
JP <- left_join(A, B, "date")
EM <- EM_df %>% MY_excess_return(., "EM_HY", "EM")
A <- SA_df %>% MY_excess_return(., "SA_HY", "SA")
B <- SA_df %>% MY_excess_return(., "SA_DG", "SA")
SA <- left_join(A, B, "date")
SA
EM
EU
US<- left_join(A, B, "date")
US
UK
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(gt)
library(tidyverse)
library(huxtable)
library(kableExtra)
library(xtable)
library(fmxdat)
pacman::p_load("TTR")
pacman::p_load("tidyr", "tbl2xts","devtools","lubridate", "readr", "PerformanceAnalytics", "ggplot2", "dplyr")
source("code/uncompoundedexcess.R")
source("code/simpleexcessreturn.R")
source("code/EXCESSRETURN.R")
source("code/monthlyreturns.R")
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue", "zoo")
df<- readxl::read_xlsx("data/MAD .xlsx")
#  change the column names for ease of analysis
geographical_codenames <- c("UK_HY", "EM_HY", "UK", "EM", "UK_HY_B", "UK_B", "JP_HY", "EU", "US_HY", "US", "W_HY", "W", "EU_DG", "EU_2", "JP_DG", "US_DG", "US_2", "JP", "SA_DG", "SA", "SA_HY", "EU_HY", "W_HY", "W")
# always working with those indexes
colnames(df)[2:23] <- geographical_codenames
a <- df %>% MY_excess_return(., "UK_HY", "UK")
b <- df %>% MY_excess_return(., "UK_HY_B", "UK_B")
c <- df %>% MY_excess_return(., "US_HY", "US")
d <- df %>% MY_excess_return(., "US_DG", "US_2")
e <- df %>% MY_excess_return(., "EU_HY", "EU")
f <- df %>% MY_excess_return(., "EU_DG", "EU_2")
g <- df %>% MY_excess_return(., "JP_HY", "JP")
h <- df %>% MY_excess_return(., "JP_DG", "JP")
i <- df %>% MY_excess_return(., "EM_HY", "EM")
j <- df %>% MY_excess_return(., "SA_HY", "SA")
k <- df %>% MY_excess_return(., "SA_DG", "SA")
l <- df %>% MY_excess_return(., "W_HY", "W")
# Table to describe excess returns
excess_return_df <- list( a, b, c, d, e,f,g,h,i,j,k, l) %>%
reduce(inner_join, by='date')
table_df <- excess_return_df %>%
gather(Regions, Cumulative_Excess_Return, -date) %>%
group_by(Regions) %>%
summarise("Start Date" = first(date) , "Total Years"  = round( n()/12,0),  Median = median(Cumulative_Excess_Return),  "Cumulative Excess Return" = last(Cumulative_Excess_Return))
library(xtable)
data <- table_df %>% tibble::as_tibble()
table <- xtable(data, caption = "Cumulative Excess Return \\label{tab1}")
print.xtable(table,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.3,
comment = FALSE,
caption.placement = 'bottom'
)
a <- df %>% MY_excess_return(., "UK_HY", "UK")
b <- df %>% MY_excess_return(., "UK_HY_B", "UK_B")
c <- df %>% MY_excess_return(., "US_HY", "US")
d <- df %>% MY_excess_return(., "US_DG", "US_2")
e <- df %>% MY_excess_return(., "EU_HY", "EU")
f <- df %>% MY_excess_return(., "EU_DG", "EU_2")
g <- df %>% MY_excess_return(., "JP_HY", "JP")
h <- df %>% MY_excess_return(., "JP_DG", "JP")
i <- df %>% MY_excess_return(., "EM_HY", "EM")
j <- df %>% MY_excess_return(., "SA_HY", "SA")
k <- df %>% MY_excess_return(., "SA_DG", "SA")
l <- df %>% MY_excess_return(., "W_HY", "W")
# Table to describe excess returns
excess_return_df <- list( a, b, c, d, e,f,g,h,i,j,k, l) %>%
reduce(inner_join, by='date')
table_df <- excess_return_df %>%
gather(Regions, Cumulative_Excess_Return, -date) %>%
group_by(Regions) %>%
summarise("Start Date" = first(date) , "Total Years"  = round( n()/12,0),  Median = median(Cumulative_Excess_Return),  "Cumulative Excess Return" = last(Cumulative_Excess_Return))
library(xtable)
data <- table_df %>% tibble::as_tibble()
table <- xtable(data, caption = "Cumulative Excess Return \\label{tab1}")
print.xtable(table,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.3,
comment = FALSE,
caption.placement = 'bottom'
)
rate_data <- readxl::read_xlsx("data/Policy Rates.xlsx")
names <- c("Date", "US", "UK", "JP", "ECB", "SA")
colnames(rate_data) <- names
US_rates <- rate_data %>% select(Date, US)
UK_rates <- rate_data %>% select(Date, UK)
JP_rates <- rate_data %>% select(Date, JP)
SA_rates <- rate_data %>% select(Date, SA)
ECB_rates <- rate_data %>% select(Date, ECB)
# Get Rates for the US
source("code/Interest_Regime.R")
source("code/Stratifier.R")
#  rename the columns for the function to work
Regime_df <- Regime_change_df(US_rates, "US", 3)
Hiking_date_vector_us <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_us <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_us <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(UK_rates, "UK", 3)
Hiking_date_vector_uk <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_uk <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_uk <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(JP_rates, "JP", 3)
Hiking_date_vector_jp <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_jp <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_jp <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(SA_rates, "SA", 3)
Hiking_date_vector_sa <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_sa <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_sa <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(ECB_rates, "ECB", 3)
Hiking_date_vector_eu <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_eu <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_eu <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
# Hiking Performance
Hiking_performance <-  bind_rows(
stratifier(df, "EU_HY", "EU", Hiking_date_vector_eu, "Hiking" ),
stratifier(df, "EU_DG", "EU_2", Hiking_date_vector_eu, "Hiking" ),
stratifier(df, "UK_HY", "UK", Hiking_date_vector_uk, "Hiking" ),
stratifier(df, "UK_HY_B", "UK", Hiking_date_vector_uk, "Hiking" ),
stratifier(df, "EM_HY", "EM", Hiking_date_vector_us, "Hiking"),
stratifier(df, "SA_HY", "SA", Hiking_date_vector_sa, "Hiking" ),
stratifier(df, "SA_DG", "SA", Hiking_date_vector_sa, "Hiking" ),
stratifier(df, "US_HY", "US", Hiking_date_vector_us, "Hiking" ),
stratifier(df, "US_DG", "US", Hiking_date_vector_us, "Hiking" )
)
#  Cutting Perfromance
Cutting_performance <-  bind_rows(
stratifier(df, "EU_HY", "EU", Cutting_date_vector_eu, "Cut" ),
stratifier(df, "EU_DG", "EU_2", Cutting_date_vector_eu, "Cut" ),
stratifier(df, "UK_HY", "UK", Cutting_date_vector_uk, "Cut" ),
stratifier(df, "UK_HY_B", "UK", Cutting_date_vector_uk, "Cut" ),
stratifier(df, "EM_HY", "EM", Cutting_date_vector_us, "Cut"),
stratifier(df, "SA_HY", "SA", Cutting_date_vector_sa, "Cut" ),
stratifier(df, "SA_DG", "SA", Cutting_date_vector_sa, "Cut" ),
stratifier(df, "US_HY", "US", Cutting_date_vector_us, "Cut" ),
stratifier(df, "US_DG", "US", Cutting_date_vector_us, "Cut" )
)
# Nuetral
Nuetral_perfromance <-  bind_rows(
stratifier(df, "EU_HY", "EU", Neutral_date_vector_eu, "Neutral" ),
stratifier(df, "EU_DG", "EU_2", Neutral_date_vector_eu, "Neutral" ),
stratifier(df, "UK_HY", "UK", Neutral_date_vector_uk, "Neutral" ),
stratifier(df, "UK_HY_B", "UK", Neutral_date_vector_uk, "Neutral" ),
stratifier(df, "JP_HY", "JP", Neutral_date_vector_jp, "Neutral" ),
stratifier(df, "JP_DG", "JP", Neutral_date_vector_jp, "Neutral" ),
stratifier(df, "EM_HY", "EM", Neutral_date_vector_us, "Neutral"),
stratifier(df, "SA_HY", "SA", Neutral_date_vector_sa, "Neutral" ),
stratifier(df, "SA_DG", "SA", Neutral_date_vector_sa, "Neutral" ),
stratifier(df, "US_HY", "US", Neutral_date_vector_us, "Neutral" ),
stratifier(df, "US_DG", "US", Neutral_date_vector_us, "Neutral" )
)
CB_df <- bind_rows(Nuetral_perfromance,
Cutting_performance, Hiking_performance) %>% arrange(Index)
data = CB_df %>% tibble::as_tibble()
addtorow          <- list()
addtorow$pos      <- list()
addtorow$pos[[1]] <- c(0)
addtorow$command  <- c(paste("\\hline \n",
"\\endhead \n",
"\\hline \n",
"{\\footnotesize Continued on next page} \n",
"\\endfoot \n",
"\\endlastfoot \n",sep=""))
table <- xtable(data, caption = "Long Table Example")
print.xtable(table,
tabular.environment = "longtable",
floating = FALSE, # Leave this as is.
table.placement = 'H', # Leave this as is.
booktabs = T, # Aesthetics
include.rownames = FALSE,  # Typically you don't want this in a table.
add.to.row = addtorow, # For adding the Continued on next page part...
comment = FALSE,
caption.placement = 'top',  # Where do you want the caption?
size="\\fontsize{12pt}{13pt}\\selectfont"  # Size of text in table..
)
Lovol_performance
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
vol_data <- readxl::read_xlsx("data/volatility.xlsx")
vol_data <- readxl::read_xlsx("data/volatility for indexes.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, JALSHVOL)
vol_data <- readxl::read_xlsx("data/volatility for indexes.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, SAVIT40)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
# US
Vixroll <- Rolling_sd(VIX ,"VIX")
VIX
vol_data <- readxl::read_xlsx("data/volatility for indexes.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, SAVIT40)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
# US
Vixroll <- Rolling_sd(VIX ,"VIX")
#
# # get the top quartile and bottom quartil
#
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# # US strat
hivol_per_vector_us <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_us <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#
# # Europe strat
#
Vixroll <- Rolling_sd(V2X ,"V2X")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_eu  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_eu  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#
# # SA
#
Vixroll <- Rolling_sd(JSV ,"JALSHVOL")
vol_data <- readxl::read_xlsx("data/volatility for indexes.xlsx")
VIX <- vol_data %>% select(Date, VIX)
V2X <- vol_data %>% select(Date, V2X)
JSV <- vol_data %>% select(Date, SAVIT40)
# get rolling sd for the volatility index
source("code/rollingstarnddev.R")
# US
Vixroll <- Rolling_sd(VIX ,"VIX")
#
# # get the top quartile and bottom quartil
#
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# # US strat
hivol_per_vector_us <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_us <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#
# # Europe strat
#
Vixroll <- Rolling_sd(V2X ,"V2X")
# get the top quartile and bottom quartil
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_eu  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_eu  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#
# # SA
#
Vixroll <- Rolling_sd(JSV ,"SAVIT40")
#
# # get the top quartile and bottom quartil
#
strat_df <- Vixroll %>% mutate(topQ = quantile(RollSD, probs = 0.8),
botQ = quantile(RollSD, probs = 0.2),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_sa <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_sa <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
novol_per_vector_sa <- strat_df %>% filter(Strat %in% "Normal_Vol") %>% pull(Date)
# Getting excess return for the period and indices
#  High Vol df
source("code/Stratifier.R")
Hivol_performance <-  bind_rows(
stratifier(df, "EU_HY", "EU", hivol_per_vector_eu, "High Vol Period" ),
stratifier(df, "EU_HY", "EU", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "EU_HY", "EU", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "EU_DG", "EU_2", hivol_per_vector_eu, "High Vol Period" ),
stratifier(df, "UK_HY", "UK", hivol_per_vector_eu, "High Vol Period" ),
stratifier(df, "UK_HY_B", "UK", hivol_per_vector_eu, "High Vol Period" ),
stratifier(df, "JP_HY", "JP", hivol_per_vector_us, "High Vol Period" ),
stratifier(df, "JP_DG", "JP", hivol_per_vector_us, "High Vol Period" ),
stratifier(df, "EM_HY", "EM", hivol_per_vector_us, "High Vol Period" ),
stratifier(df, "SA_HY", "SA", hivol_per_vector_sa, "High Vol Period" ),
stratifier(df, "SA_DG", "SA", hivol_per_vector_sa, "High Vol Period" ),
stratifier(df, "US_HY", "US", hivol_per_vector_us, "High Vol Period" ),
stratifier(df, "US_DG", "US", hivol_per_vector_us, "High Vol Period" )
)
#  Low Vol df
Lovol_performance <-  bind_rows(
stratifier(df, "EU_HY", "EU", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "EU_DG", "EU_2", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "UK_HY", "UK", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "UK_HY_B", "UK", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "JP_HY", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "JP_DG", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "EM_HY", "EM", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "SA_HY", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "SA_DG", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "US_HY", "US", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "US_DG", "US", lovol_per_vector_us, "Low Vol Period" )
)
data <- table_df %>% tibble::as_tibble()
table <- xtable(data, caption = "Cumulative Excess Return \\label{tab1}")
print.xtable(table,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.3,
comment = FALSE,
caption.placement = 'bottom'
)
source("code/InformationRatioRoll.R")
a <-  df %>% Information_Ratio_Roll(., "EU_HY", "EU", 20100104, 36)
b <-  df %>% Information_Ratio_Roll(., "EU_DG", "EU_2",20100104, 36)
c <- df %>% Information_Ratio_Roll(., "UK_HY", "UK", 20100104, 36)
d <- df %>% Information_Ratio_Roll(., "UK_HY_B", "UK", 20100104, 36)
e <- df %>% Information_Ratio_Roll(., "JP_HY", "JP", 20100104, 36)
f <- df %>% Information_Ratio_Roll(., "JP_DG", "JP", 20100104, 36)
g <- df %>% Information_Ratio_Roll(., "EM_HY", "EM", 20100104, 36)
h <- df %>% Information_Ratio_Roll(., "SA_HY", "SA", 20100104, 36)
i <- df %>% Information_Ratio_Roll(., "SA_DG", "SA", 20100104, 36)
j <- df %>% Information_Ratio_Roll(., "US_HY", "US", 20100104, 36)
k <- df %>% Information_Ratio_Roll(., "US_DG", "US_2", 20100104, 36)
consistency_df <- list(a, b, c, d, e,f,g,h,i,j,k) %>%
reduce(inner_join, by='date') %>%
gather(IR , ret, -date)
plot <- consistency_df %>%   ggplot() +
geom_line(aes(date, ret), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~IR) +
labs(x = "", y = "Return (%)", title = "Performance Consistency", subtitle = "Dividend Portfolios not as good as we thought", caption = "Source:Bloomberg and\n Authors Calculations")
source("code/InformationRatioRoll.R")
a <-  df %>% Information_Ratio_Roll(., "EU_HY", "EU", 20100104, 36)
b <-  df %>% Information_Ratio_Roll(., "EU_DG", "EU_2",20100104, 36)
c <- df %>% Information_Ratio_Roll(., "UK_HY", "UK", 20100104, 36)
d <- df %>% Information_Ratio_Roll(., "UK_HY_B", "UK", 20100104, 36)
e <- df %>% Information_Ratio_Roll(., "JP_HY", "JP", 20100104, 36)
f <- df %>% Information_Ratio_Roll(., "JP_DG", "JP", 20100104, 36)
g <- df %>% Information_Ratio_Roll(., "EM_HY", "EM", 20100104, 36)
h <- df %>% Information_Ratio_Roll(., "SA_HY", "SA", 20100104, 36)
i <- df %>% Information_Ratio_Roll(., "SA_DG", "SA", 20100104, 36)
j <- df %>% Information_Ratio_Roll(., "US_HY", "US", 20100104, 36)
k <- df %>% Information_Ratio_Roll(., "US_DG", "US_2", 20100104, 36)
consistency_df <- list(a, b, c, d, e,f,g,h,i,j,k) %>%
reduce(inner_join, by='date') %>%
gather(IR , ret, -date)
plot <- consistency_df %>%   ggplot() +
geom_line(aes(date, ret), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
# facet_wrap(~IR) +
labs(x = "", y = "Return (%)", title = "Performance Consistency", subtitle = "Dividend Portfolios not as good as we thought", caption = "Source:Bloomberg and\n Authors Calculations")
source("code/InformationRatioRoll.R")
a <-  df %>% Information_Ratio_Roll(., "EU_HY", "EU", 20100104, 36)
b <-  df %>% Information_Ratio_Roll(., "EU_DG", "EU_2",20100104, 36)
c <- df %>% Information_Ratio_Roll(., "UK_HY", "UK", 20100104, 36)
d <- df %>% Information_Ratio_Roll(., "UK_HY_B", "UK", 20100104, 36)
e <- df %>% Information_Ratio_Roll(., "JP_HY", "JP", 20100104, 36)
f <- df %>% Information_Ratio_Roll(., "JP_DG", "JP", 20100104, 36)
g <- df %>% Information_Ratio_Roll(., "EM_HY", "EM", 20100104, 36)
h <- df %>% Information_Ratio_Roll(., "SA_HY", "SA", 20100104, 36)
i <- df %>% Information_Ratio_Roll(., "SA_DG", "SA", 20100104, 36)
j <- df %>% Information_Ratio_Roll(., "US_HY", "US", 20100104, 36)
k <- df %>% Information_Ratio_Roll(., "US_DG", "US_2", 20100104, 36)
consistency_df <- list(a, b, c, d, e,f,g,h,i,j,k) %>%
reduce(inner_join, by='date') %>%
gather(IR , ret, -date)
plot <- consistency_df %>%   ggplot() +
geom_line(aes(date, ret), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
# facet_wrap(~IR) +
labs(x = "", y = "Return (%)", title = "Performance Consistency", subtitle = "Dividend Portfolios not as good as we thought", caption = "Source:Bloomberg and\n Authors Calculations")
source("code/InformationRatioRoll.R")
a <-  df %>% Information_Ratio_Roll(., "EU_HY", "EU", 20100104, 36)
b <-  df %>% Information_Ratio_Roll(., "EU_DG", "EU_2",20100104, 36)
c <- df %>% Information_Ratio_Roll(., "UK_HY", "UK", 20100104, 36)
d <- df %>% Information_Ratio_Roll(., "UK_HY_B", "UK", 20100104, 36)
e <- df %>% Information_Ratio_Roll(., "JP_HY", "JP", 20100104, 36)
f <- df %>% Information_Ratio_Roll(., "JP_DG", "JP", 20100104, 36)
g <- df %>% Information_Ratio_Roll(., "EM_HY", "EM", 20100104, 36)
h <- df %>% Information_Ratio_Roll(., "SA_HY", "SA", 20100104, 36)
i <- df %>% Information_Ratio_Roll(., "SA_DG", "SA", 20100104, 36)
j <- df %>% Information_Ratio_Roll(., "US_HY", "US", 20100104, 36)
k <- df %>% Information_Ratio_Roll(., "US_DG", "US_2", 20100104, 36)
consistency_df <- list(a, b, c, d, e,f,g,h,i,j,k) %>%
reduce(inner_join, by='date') %>%
gather(IR , ret, -date)
# plot <- consistency_df %>%   ggplot() +
# geom_line(aes(date, ret), color = "steelblue", size = 1.1, alpha = 0.8) +
# fmxdat::theme_fmx() +
# # facet_wrap(~IR) +
# labs(x = "", y = "Return (%)", title = "Performance Consistency", subtitle = "Dividend Portfolios not as good as we thought", caption = "Source:Bloomberg")
#
# plot
source("code/InformationRatioRoll.R")
a <-  df %>% Information_Ratio_Roll(., "EU_HY", "EU", 20100104, 36)
b <-  df %>% Information_Ratio_Roll(., "EU_DG", "EU_2",20100104, 36)
c <- df %>% Information_Ratio_Roll(., "UK_HY", "UK", 20100104, 36)
d <- df %>% Information_Ratio_Roll(., "UK_HY_B", "UK", 20100104, 36)
e <- df %>% Information_Ratio_Roll(., "JP_HY", "JP", 20100104, 36)
f <- df %>% Information_Ratio_Roll(., "JP_DG", "JP", 20100104, 36)
g <- df %>% Information_Ratio_Roll(., "EM_HY", "EM", 20100104, 36)
h <- df %>% Information_Ratio_Roll(., "SA_HY", "SA", 20100104, 36)
i <- df %>% Information_Ratio_Roll(., "SA_DG", "SA", 20100104, 36)
j <- df %>% Information_Ratio_Roll(., "US_HY", "US", 20100104, 36)
k <- df %>% Information_Ratio_Roll(., "US_DG", "US_2", 20100104, 36)
consistency_df <- list(a, b, c, d, e,f,g,h,i,j,k) %>%
reduce(inner_join, by='date') %>%
gather(IR , ret, -date)
plot <- consistency_df %>%
ggplot() +
geom_line(aes(date, ret), color = "steelblue", size = 1.1, alpha = 0.8) +  facet_wrap(~IR) + labs(x = "", y = "Return (%)", title = "Performance Consistency", subtitle = "Dividend Portfolios not as good as we thought", caption = "Source:Bloomberg")
#
# plot
cum_df <- excess_return_df %>%
rename_all(~paste0("Excess from ", .)) %>% rename( "date" = "Excess from date") %>%
gather(Funds, ret, -date) %>% mutate(Year = format(date, "%Y")) %>% group_by(Year, Funds) %>% summarize(DD = (max(ret) - min(ret))/max(ret)* 100, Range = range(ret)) %>% arrange(desc(Range))
order <- cum_df %>% pull(Funds) %>% unique()
cum_df$Year <- as.Date(paste0(cum_df$Year, "-01-01"))
source("code/order.R")
cum_df %>%
plot_order(., Column = "Funds", Order = order) %>%
ggplot() +
geom_line(aes(Year, DD), color = "steelblue", size = 1.1, alpha = 0.8) + facet_wrap(~Funds) +
labs(x = "", y = " Max Drawdowns (%)", title = "Yearly Drawdowns", subtitle = "", caption = "Source:Bloomberg and\n Authors Calculations")
plot
View(Information_Ratio_Roll)
View(Information_Ratio_Roll)
source("~/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/code/InformationRatioRoll.R")
source("~/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/code/InformationRatioRoll.R")
bind_rows(Lovol_performance, Hivol_performance)
data <- bind_rows(Lovol_performance, Hivol_performance) %>% arrange(Index)
