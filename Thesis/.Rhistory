ungroup()
raw.indexes %>%
arrange(Date)  %>%
gather(Tickers, Level, -Date) %>%
group_by(Tickers) %>%
mutate(Level = as.numeric(Level),
Ret = Level / lag(Level)-1) %>%
select(Date, Tickers, Ret) %>%
ungroup()
indexes <- raw.indexes %>%
arrange(Date)  %>%
gather(Tickers, Level, -Date) %>%
group_by(Tickers) %>%
mutate(Level = as.numeric(Level),
Ret = Level / lag(Level)-1) %>%
select(Date, Tickers, Ret) %>%
ungroup()
Moments_Comp <- function(funds, BM, Yrs_LookBack, NA_Check){
funds_considered <-
funds %>% filter(date >= fmxdat::safe_year_min(datesel = last(date), N = Yrs_LookBack))
Funds_Cons <-
funds_considered %>%
group_by(Tickers) %>%
summarise(N_noNA = sum(!is.na(Ret)) / length(unique(funds_considered$date)) ) %>%
filter(N_noNA > NA_Check) %>% pull(Tickers)
Fundxts <-
funds_considered %>% filter(Tickers %in% Funds_Cons) %>%
tbl_xts(cols_to_xts = Ret, spread_by = Tickers, Colnames_Exact = T)
BMxts <-
funds_considered %>% filter(Tickers %in% BM) %>%
tbl_xts(cols_to_xts = Ret, Colnames_Exact = T)
library(PerformanceAnalytics)
Moms <-
bind_rows(
data.frame(Return.cumulative(Fundxts) ) %>% round(., 3),
data.frame(Return.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
data.frame(PerformanceAnalytics::Return.annualized.excess(Fundxts, BMxts) ) %>% round(., 3),
data.frame(sd.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
data.frame(PerformanceAnalytics::AdjustedSharpeRatio( Fundxts ) ) %>% round(., 3),
data.frame(PainIndex(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
data.frame(AverageDrawdown(Fundxts, scale = 12)) %>% round(., 3),
data.frame(fmxdat::Safe_TE(Ra = Fundxts, Rb = BMxts, scale = 12)) %>% round(., 3),
data.frame(PerformanceAnalytics::InformationRatio(Ra = Fundxts, Rb = BMxts)) %>% round(., 3),
data.frame(PerformanceAnalytics::CAPM.beta(Ra = Fundxts, Rb = BMxts, Rf = 0)) %>% round(., 3),
data.frame(PerformanceAnalytics::CAPM.beta.bull(Ra = Fundxts, Rb = BMxts, Rf = 0)) %>% round(., 3),
data.frame(PerformanceAnalytics::CAPM.beta.bear(Ra = Fundxts, Rb = BMxts, Rf = 0)) %>% round(., 3),
data.frame(PerformanceAnalytics::UpDownRatios(Ra = Fundxts, Rb = BMxts, method = "Percent", side = "Up")) %>% round(., 3),
data.frame(PerformanceAnalytics::CVaR(R = Fundxts, p = 0.05, method = "modified")) %>% round(., 3)
) %>%
tibble::rownames_to_column("Info") %>%
mutate(Period = glue::glue("Last {Yrs_LookBack} Years"), Info = c("Cum Returns", "Returns (Ann.)", "Returns Excess (Ann.)", "SD (Ann.)", "Adj. Sharpe Ratio", "Pain Index",
"Avg DD", "Tracking Error", "Information Ratio", "Beta", "Beta Bull", "Beta Bear", "Up-Down Ratio", "Modified CVaR")) %>%
relocate(Period, .before = Info) %>% as_tibble()
# This line replaces the `.` with a space.
# Note the forward slashes, as `.` there means everything, `\\.` means a full-stop
colnames(Moms) <- gsub("\\.", " ", colnames(Moms))
Moms
}
raw.indexes %>% gather(Tickers, Lev, -Date) %>% select(Ticker) %>% names()
raw.indexes %>% gather(Tickers, Lev, -Date) %>% select(Tickers) %>% names()
raw.indexes %>% gather(Tickers, Lev, -Date) %>% names()
raw.indexes  %>% names()
Fundselected <- c("SPSADAZT", "JALSH")
Tab_stats <-
bind_rows(
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 3, NA_Check),
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 5, NA_Check)
)
funds <- raw.indexes %>%
arrange(Date)  %>%
gather(Tickers, Level, -Date) %>%
group_by(Tickers) %>%
mutate(Level = as.numeric(Level),
Ret = Level / lag(Level)-1) %>%
select(Date, Tickers, Ret) %>%
ungroup()
Fundselected <- c("SPSADAZT", "JALSH")
Tab_stats <-
bind_rows(
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 3, NA_Check),
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 5, NA_Check)
)
Moments_Comp <- function(funds, BM, Yrs_LookBack, NA_Check){
funds_considered <-
funds %>% filter(date >= fmxdat::safe_year_min(datesel = last(date), N = Yrs_LookBack))
Funds_Cons <-
funds_considered %>%
group_by(Tickers) %>%
summarise(N_noNA = sum(!is.na(Ret)) / length(unique(funds_considered$date)) ) %>%
filter(N_noNA > NA_Check) %>% pull(Tickers)
Fundxts <-
funds_considered %>% filter(Tickers %in% Funds_Cons) %>%
tbl_xts(cols_to_xts = Ret, spread_by = Tickers, Colnames_Exact = T)
BMxts <-
funds_considered %>% filter(Tickers %in% BM) %>%
tbl_xts(cols_to_xts = Ret, Colnames_Exact = T)
library(PerformanceAnalytics)
Moms <-
bind_rows(
data.frame(Return.cumulative(Fundxts) ) %>% round(., 3),
data.frame(Return.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
data.frame(PerformanceAnalytics::Return.annualized.excess(Fundxts, BMxts) ) %>% round(., 3),
data.frame(sd.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
) %>%
tibble::rownames_to_column("Info") %>%
mutate(Period = glue::glue("Last {Yrs_LookBack} Years"), Info = c("Cum Returns", "Returns (Ann.)", "Returns Excess (Ann.)", "SD (Ann.)")) %>%
relocate(Period, .before = Info) %>% as_tibble()
# This line replaces the `.` with a space.
# Note the forward slashes, as `.` there means everything, `\\.` means a full-stop
colnames(Moms) <- gsub("\\.", " ", colnames(Moms))
Moms
}
Fundselected <- c("SPSADAZT", "JALSH")
Tab_stats <-
bind_rows(
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 3, NA_Check),
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 5, NA_Check)
)
Moments_Comp <- function(funds, BM, Yrs_LookBack, NA_Check){
funds_considered <-
funds %>% filter(date >= fmxdat::safe_year_min(datesel = last(date), N = Yrs_LookBack))
Funds_Cons <-
funds_considered %>%
group_by(Tickers) %>%
summarise(N_noNA = sum(!is.na(Ret)) / length(unique(funds_considered$date)) ) %>%
filter(N_noNA > NA_Check) %>% pull(Tickers)
Fundxts <-
funds_considered %>% filter(Tickers %in% Funds_Cons) %>%
tbl_xts(cols_to_xts = Ret, spread_by = Tickers, Colnames_Exact = T)
BMxts <-
funds_considered %>% filter(Tickers %in% BM) %>%
tbl_xts(cols_to_xts = Ret, Colnames_Exact = T)
library(PerformanceAnalytics)
Moms <-
bind_rows(
data.frame(Return.cumulative(Fundxts) ) %>% round(., 3),
data.frame(Return.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3),
data.frame(PerformanceAnalytics::Return.annualized.excess(Fundxts, BMxts) ) %>% round(., 3),
data.frame(sd.annualized(Fundxts, scale = 12, geometric = T)) %>% round(., 3)
) %>%
tibble::rownames_to_column("Info") %>%
mutate(Period = glue::glue("Last {Yrs_LookBack} Years"), Info = c("Cum Returns", "Returns (Ann.)", "Returns Excess (Ann.)", "SD (Ann.)")) %>%
relocate(Period, .before = Info) %>% as_tibble()
# This line replaces the `.` with a space.
# Note the forward slashes, as `.` there means everything, `\\.` means a full-stop
colnames(Moms) <- gsub("\\.", " ", colnames(Moms))
Moms
}
Fundselected <- c("SPSADAZT", "JALSH")
Tab_stats <-
bind_rows(
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 3, NA_Check),
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 5, NA_Check)
)
Moments_Comp(funds %>% filter(Tickers %in% Fundselected), BM, Yrs_LookBack = 5, NA_Check)
data <- fmxdat::Jalshtr
data %>% arrange(date)
library(tidyverse)
data %>% arrange(date)
data %>%
arrange(date) %>%
mutate(YM = format(date, "%b '%b "))
data %>%
arrange(date) %>%
mutate(YM = format(date, "%b 'y "))
data %>%
arrange(date) %>%
mutate(YM = format(date, "%b '%y "))
data %>%
arrange(date) %>%
mutate(YM = format(date, "%b'%y "))
data %>%
arrange(date) %>%
mutate(YM = format(date, "%b'%y ")) %>%
mutate(ret = TRI / lag(TRI)-1)
data %>%
arrange(date) %>%
mutate(YM = format(date, "%b'%y ")) %>%
mutate(ret = TRI / lag(TRI)-1) %>%
mutate(ret = coalesce(ret, 0
data %>%
data <- readxl::read_xlsx("data/Benckmarks.xlsx")
data
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
library(lubridate)
indexes <- readxl::read_xlsx("data/Benckmarks.xlsx")
indexes %>% tbl_xts(., spread_by = indexes, cols_to_xts = indexes)
indexes %>% tbl_xts(., spread_by = values, cols_to_xts = indexes)
indexes <- indexes %>% gather(Index, Value, -date)
indexes <- indexes %>% gather(Index, Value, -Date)
indexes
indexes %>% tbl_xts(., spread_by = Index, cols_to_xts = Value )
indexes <- indexes %>% gather(Index, Value, -Date) %>%
coalesce(Value,0
indexes %>% tbl_xts(., spread_by = Index, cols_to_xts = Value )
indexes
indexes %>% is.na()
indexes <- indexes %>% gather(Index, Value, -Date) %>%
coalesce(Value, 0 )
indexes <- indexes %>% gather(Index, Value, -Date) %>%
indexes %>% coalesce(Value, 0)
indexes <- indexes %>% gather(Index, Value, -Date) %>%
coalesce(indexes$Value, 0)
indexes <- indexes %>% gather(Index, Value, -Date) %>%
coalesce(Value, 0)
indexes <- indexes %>%
gather(Index, Value, -Date) %>%
coalesce(Value, 0)
indexes <- indexes %>%
gather(Index, Value, -Date) %>%
replace_na(list(Value = 0))
indexes
indexes <- indexes %>%
gather(Index, Value, -Date) %>%
replace_na(list(Value = 0))
indexes <- indexes %>%
mutate(Value = as.numeric(Value)) %>%
gather(Index, Value, -Date) %>%
replace_na(list(Value = 0))
indexes <- indexes
indexes
indexes <- indexes %>% as.numeric($Value)
indexes <- indexes %>% gather(Index, Value, -Date)
indexes <- indexes %>% gather(Index, Value, -Date) %>% mutate(Returns = Value/ lag(Value)-1)
indexes$Value <- as.numeric()
indexes$Value <- as.numeric(indexes$Value)
indexes <- indexes %>%
gather(Index, Value, -Date) %>%
mutate(Returns = Value/ lag(Value)-1)
indexes <- indexes %>%
mutate(Value = as.numeric(Value)) %>%
filter(!is.na(Value) & !is.nan(Value)) %>%
gather(Index, Value, -Date) %>%
mutate(Returns = Value / lag(Value) - 1)
indexes %>% gather(Index, Value, -Date)
indexes <- readxl::read_xlsx("data/Benckmarks.xlsx")
indexes %>% gather(Index, Value, -Date)
indexes %>% gather(Index, Value, -Date) %>% arrange(Date) %>%
group_by(Index)
indexes %>% gather(Index, Value, -Date) %>% arrange(Date) %>%
group_by(Index) %>% mutate(Returns = Value/ lag(Value)-1)
indexes %>%
gather(Index, Value, -Date) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1)
indexes %>%
gather(Index, Value, -Date) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)
indexes %>%
indexes %>%
gather(Index, Value, -Date) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0))
indexes %>%
gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0))
simple_returns <- indexes %>%
gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0))
simple_returns
View(simple_returns)
simple_returns <- indexes %>%
gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup()
simple_returns %>% tbl_xts(., cols_to_xts = Returns, spread_by = Indexes)
simple_returns %>% tbl_xts(., cols_to_xts = Returns, spread_by = Index)
simple_returns <- indexes %>%
gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
Indexes <- indexes %>% select(FUDP,M2EFDY, GDUEEGF)
Indexes <- indexes %>% select(FUDP,M2EFDY, GDUEEGF)
Benchmarks <- indexes %>% select(FUDP, TUKXG, M2GBDY)
index.returns <- gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
index.returns <- gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
index.returns <- gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
index.returns <- Indexes %>%  gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
Indexes <- indexes %>%
select(Date, FUDP,M2EFDY, GDUEEGF)
Benchmarks <- indexes %>% select(Date, FUDP, TUKXG, M2GBDY)
index.returns <- Indexes %>%  gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
benchmark.returns <- Benchmarks %>%  gather(Benchmark, Value, -Date) %>%
group_by(Benchmark) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
Indexes <- data() %>%
select(Date, FUDP,M2EFDY, GDUEEGF)
indexes <- data %>%
select(Date, FUDP,M2EFDY, GDUEEGF)
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
library(lubridate)
data<- readxl::read_xlsx("data/Benckmarks.xlsx")
indexes <- data %>%
select(Date, FUDP,M2EFDY, GDUEEGF)
Benchmarks <- data %>% select(Date, FUDP, TUKXG, M2GBDY)
index.returns <- indexes %>%  gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
benchmark.returns <- Benchmarks %>%  gather(Benchmark, Value, -Date) %>%
group_by(Benchmark) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
benchmark.returns <- Benchmarks %>%  gather(Benchmark, Value, -Date) %>%
group_by(Benchmark) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Benchmark)
Excess.return <- PerformanceAnalytics::Return.annualized.excess(Rp = index.returns,
Rb = benchmark.returns, geometric = T)
Excess.return
?Return.annualized.excess
benchmark.returns
benchmark.returns <- Benchmarks %>%  gather(Benchmark, Value, -Date) %>%
group_by(Benchmark) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup()
index.returns <- indexes %>%  gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup()
index.returns
# Turn that to xts to use Performance Analytics
# tbl_xts(., cols_to_xts = Returns, spread_by = Benchmark)
?PerformanceAnalytics::Return.excess
excess.return.series <- index.returns-benchmark.returns
excess.return.series <- index.returns$Returns-benchmark.returns$Returns
excess.return.series
df <- data.frame(
Index1_Return = c(0.02, 0.03, 0.01, 0.04, 0.02),
Index2_Return = c(0.01, 0.02, 0.03, 0.02, 0.01),
Benchmark1_Return = c(0.01, 0.02, 0.02, 0.03, 0.01),
Benchmark2_Return = c(0.02, 0.01, 0.03, 0.02, 0.01)
)
# Calculate the excess return series for each pair of index and benchmark
excess_return_series <- mapply(function(index_ret, bench_ret) {
index_ret - bench_ret
}, df$Index1_Return, df$Benchmark1_Return, df$Index2_Return, df$Benchmark2_Return)
excess.return <- function(index_df, benchmark_df, index_name, benchmark_name){
Date <- index_df$Date
Xreturn <- index_df[[index_name]] - benchmark_df[[benchmark_name]]
Names <- paste0("Excess of ", index_name)
xdf <- data.frame(Date = Date, Names = Names, Xreturn = Xreturn)
return(xdf)
}
index_df <- data.frame(
Date = seq(as.Date("2023-01-01"), as.Date("2023-01-05"), by = "days"),
Index_Return = c(0.02, 0.03, 0.01, 0.04, 0.02)
)
benchmark_df <- data.frame(
Date = seq(as.Date("2023-01-01"), as.Date("2023-01-05"), by = "days"),
Benchmark_Return = c(0.01, 0.02, 0.02, 0.03, 0.01)
)
# Calculate excess returns for index and benchmark using the function
excess_returns <- excess.return(index_df, benchmark_df, "Index_Return", "Benchmark_Return")
print(excess_returns)
#  lets create a list of indexes and their benchmark names
index.returns %>% names(Index)
#  lets create a list of indexes and their benchmark names
index.returns %>% names()
#  lets create a list of indexes and their benchmark names
index.returns %>% names(.$Value)
index.returns$Value %>% names() %>% pull()
#  lets create a list of indexes and their benchmark names
index.returns$Value %>% names()
#  lets create a list of indexes and their benchmark names
index.returns %>% unique(index.returns$Value)
#  lets create a list of indexes and their benchmark names
index.returns %>% distinct(Value)
#  lets create a list of indexes and their benchmark names
index.returns %>% distinct(Index)
#  lets create a list of indexes and their benchmark names
index.returns %>% distinct(Index) %>% pull()
#  lets create a list of indexes and their benchmark names
index.names <- index.returns %>% distinct(Index) %>% pull()
benchmark.names <- benchmark.returns %>% distinct(Benchmarks) %>% pull()
benchmark.names <- benchmark.returns %>% distinct(Benchmark) %>% pull()
benchmark.names
index.returns <- indexes %>%  gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
index.returns
excess_returns_list <- lapply(1:length(index_names), function(i) {
excess.return(index_df[[i]], benchmark_df[[i]], index_names[i], benchmark_names[i])
})
index.names <- index.returns %>% distinct(Index) %>% pull()
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
library(lubridate)
data<- readxl::read_xlsx("data/Benckmarks.xlsx")
indexes <- data %>%
select(Date, FUDP,M2EFDY, GDUEEGF)
Benchmarks <- data %>% select(Date, FUDP, TUKXG, M2GBDY)
index.returns <- indexes %>%  gather(Index, Value, -Date) %>%
group_by(Index) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Index)
benchmark.returns <- Benchmarks %>%  gather(Benchmark, Value, -Date) %>%
group_by(Benchmark) %>%
arrange(Date) %>%
mutate(Returns = Value/ lag(Value)-1) %>%
mutate(Returns = coalesce(Returns, 0)) %>%
ungroup() %>%
# Turn that to xts to use Performance Analytics
tbl_xts(., cols_to_xts = Returns, spread_by = Benchmark)
excess.return <- function(index_df, benchmark_df, index_name, benchmark_name){
Date <- index_df$Date
Xreturn <- index_df[[index_name]] - benchmark_df[[benchmark_name]]
Names <- paste0("Excess of ", index_name)
xdf <- data.frame(Date = Date, Names = Names, Xreturn = Xreturn)
return(xdf)
}
index.names <- index.returns %>% distinct(Index) %>% pull()
index.returns %>% names()
index.names <- index.returns %>% names() %>% pull()
index.names <- index.returns %>% names()
index.names <- index.returns %>% names()
benchmark.names <- benchmark.returns %>% names()
excess_returns_list <- lapply(1:length(index_names), function(i) {
excess.return(index.returns[[i]], benchmark.returns[[i]], index_names[i], benchmark_names[i])
})
excess_returns_list <- lapply(1:length(index_names), function(i) {
excess.return(index.returns[[i]], benchmark.returns[[i]], index.names[i], benchmark.names[i])
})
excess_returns_list <- lapply(1:length(index.names), function(i) {
excess.return(index.returns[[i]], benchmark.returns[[i]], index.names[i], benchmark.names[i])
})
