stratifier(df, "UK_HY_B", "UK", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "JP_HY", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "JP_DG", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "EM_HY", "EM", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "SA_HY", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "SA_DG", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "US_HY", "US", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "US_DG", "US", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "W_HY", "W", lovol_per_vector_us, "Low Vol Period")
)
stratifying_df %>% arrange(Name)
# lets get cumulative returns for our dividend strategies and Max drawdowns
cum_df <- excess_return_df %>%
rename_all(~paste0("Excess from ", .)) %>% rename( "date" = "Excess from date") %>%
gather(Funds, ret, -date) %>% mutate(Year = format(date, "%Y")) %>% group_by(Year, Funds) %>% summarize(DD = (max(ret) - min(ret))/max(ret)* 100, Range = range(ret)) %>% arrange(desc(Range))
order <- cum_df %>% pull(Funds) %>% unique()
cum_df$Year <- as.Date(paste0(cum_df$Year, "-01-01"))
source("code/order.R")
plot <- cum_df %>%
plot_order(., Column = "Funds", Order = order) %>%
ggplot() +
geom_line(aes(Year, DD), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Funds) +
labs(x = "", y = " Max Drawdowns (%)", title = "Yearly Drawdowns", subtitle = "", caption = "Source:Bloomberg and\n Authors Calculations")
plot
# lets get cumulative returns for our dividend strategies and Max drawdowns
cum_df <- excess_return_df %>% rename( "date" = "Excess_fro") %>%
gather(Funds, ret, -date) %>% mutate(Year = format(date, "%Y")) %>% group_by(Year, Funds) %>% summarize(DD = (max(ret) - min(ret))/max(ret)* 100, Range = range(ret)) %>% arrange(desc(Range))
# lets get cumulative returns for our dividend strategies and Max drawdowns
cum_df <- excess_return_df %>%
gather(Funds, ret, -date) %>% mutate(Year = format(date, "%Y")) %>% group_by(Year, Funds) %>% summarize(DD = (max(ret) - min(ret))/max(ret)* 100, Range = range(ret)) %>% arrange(desc(Range))
order <- cum_df %>% pull(Funds) %>% unique()
cum_df$Year <- as.Date(paste0(cum_df$Year, "-01-01"))
source("code/order.R")
plot <- cum_df %>%
plot_order(., Column = "Funds", Order = order) %>%
ggplot() +
geom_line(aes(Year, DD), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Funds) +
labs(x = "", y = " Max Drawdowns (%)", title = "Yearly Drawdowns", subtitle = "", caption = "Source:Bloomberg and\n Authors Calculations")
plot
plot <- cum_df %>%
plot_order(., Column = "Funds", Order = order) %>%
ggplot() +
geom_line(aes(Year, DD), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
# facet_wrap(~Funds) +
labs(x = "", y = " Max Drawdowns (%)", title = "Yearly Drawdowns", subtitle = "", caption = "Source:Bloomberg and\n Authors Calculations")
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue", "zoo")
df<- readxl::read_xlsx("data/MAD .xlsx")
#  change the column names for ease of analysis
geographical_codenames <- c("UK_HY", "EM_HY", "UK", "EM", "UK_HY_B", "UK_B", "JP_HY", "EU", "US_HY", "US", "W_HY", "W", "EU_DG", "EU_2", "JP_DG", "US_DG", "US_2", "JP", "SA_DG", "SA", "SA_HY", "EU_HY", "W_HY", "W")
colnames(df)[2:23] <- geographical_codenames
library(kableExtra)
indexes <- readxl::read_xlsx("data/Index Description.xlsx")
kable(indexes)
source("code/simpleexcessreturn.R")
source("code/EXCESSRETURN.R")
library(glue)
library(stats)
#   calculate simple returns just simple excess returns
a <- df %>% My_excess_return(., "UK_HY", "UK")
b <- df %>% My_excess_return(., "UK_HY_B", "UK_B")
c <- df %>% My_excess_return(., "US_HY", "US")
d <- df %>% My_excess_return(., "US_DG", "US_2")
e <- df %>% My_excess_return(., "EU_HY", "EU")
f <- df %>% My_excess_return(., "EU_DG", "EU_2")
g <- df %>% My_excess_return(., "JP_HY", "JP")
h <- df %>% My_excess_return(., "JP_DG", "JP")
i <- df %>% My_excess_return(., "EM_HY", "EM")
j <- df %>% My_excess_return(., "SA_HY", "SA")
k <- df %>% My_excess_return(., "SA_DG", "SA")
l <- df %>% My_excess_return(., "W_HY", "W")
# Table to describe excess returns
excess_return_df <- list( a, b, c, d, e,f,g,h,i,j,k, l) %>%
reduce(inner_join, by='date')
table_df <- excess_return_df %>%
gather(Regions, Cumulative_Excess_Return, -date) %>%
group_by(Regions) %>%
summarise("Start Date" = first(date) , "Total Years"  = round( n()/12,0),  Median = median(Cumulative_Excess_Return),  "Cumulative Excess Return" = last(Cumulative_Excess_Return))
table_df
#   get the vol data and get some dates
vol_data <- readxl::read_xlsx("data/volatility for indexes.xlsx") %>% gather(index, px , -Date) %>%
mutate(ret = px/lag(px)-1, RollSD = RcppRoll::roll_sd(1 + ret, 12, fill = NA, align = "right") *
sqrt(12)) %>%
filter(!is.na(RollSD))
# # get the top quartile and bottom quartile
strat_df <- vol_data %>% filter(index == "VIX") %>%  mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# # US strat
hivol_per_vector_us <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_us <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# UK
strat_df <-vol_data %>% filter(index == "IVIUK") %>% mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_uk  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_uk  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#  EU
strat_df <-vol_data %>% filter(index == "V2X") %>% mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_eu  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_eu  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# # SA
strat_df <-vol_data %>% filter(index == "SAVIT40") %>% mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_sa <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_sa <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#  High Vol df
source("code/Stratifier.R")
stratifying_df <-  bind_rows(
stratifier(df, "EU_HY", "EU", hivol_per_vector_eu, "High Vol" ),
stratifier(df, "EU_DG", "EU_2", hivol_per_vector_eu, "High Vol" ),
stratifier(df, "UK_HY", "UK", hivol_per_vector_eu, "High Vol" ),
stratifier(df, "UK_HY_B", "UK", hivol_per_vector_eu, "High Vol"),
stratifier(df, "JP_HY", "JP", hivol_per_vector_us, "High Vol"),
stratifier(df, "JP_DG", "JP", hivol_per_vector_us, "High Vol"),
stratifier(df, "EM_HY", "EM", hivol_per_vector_us, "High Vol"),
stratifier(df, "SA_HY", "SA", hivol_per_vector_sa, "High Vol"),
stratifier(df, "SA_DG", "SA", hivol_per_vector_sa, "High Vol"),
stratifier(df, "US_HY", "US", hivol_per_vector_us, "High Vol"),
stratifier(df, "US_DG", "US", hivol_per_vector_us, "High Vol"),
stratifier(df , "W_HY", "W", hivol_per_vector_us, "High Vol"),
stratifier(df, "EU_HY", "EU", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "EU_DG", "EU_2", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "UK_HY", "UK", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "UK_HY_B", "UK", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "JP_HY", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "JP_DG", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "EM_HY", "EM", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "SA_HY", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "SA_DG", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "US_HY", "US", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "US_DG", "US", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "W_HY", "W", lovol_per_vector_us, "Low Vol Period")
)
stratifying_df %>% arrange(Name)
# lets get cumulative returns for our dividend strategies and Max drawdowns
cum_df <- excess_return_df %>%
gather(Funds, ret, -date) %>% mutate(Year = format(date, "%Y")) %>% group_by(Year, Funds) %>% summarize(DD = (max(ret) - min(ret))/max(ret)* 100, Range = range(ret)) %>% arrange(desc(Range))
order <- cum_df %>% pull(Funds) %>% unique()
cum_df$Year <- as.Date(paste0(cum_df$Year, "-01-01"))
source("code/order.R")
plot <- cum_df %>%
plot_order(., Column = "Funds", Order = order) %>%
ggplot() +
geom_line(aes(Year, DD), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
# facet_wrap(~Funds) +
labs(x = "", y = " Max Drawdowns (%)", title = "Yearly Drawdowns", subtitle = "", caption = "Source:Bloomberg and\n Authors Calculations")
plot
# lets get cumulative returns for our dividend strategies and Max drawdowns
cum_df <- excess_return_df %>%
gather(Funds, ret, -date) %>% mutate(Year = format(date, "%Y")) %>% group_by(Year, Funds) %>% summarize(DD = (max(ret) - min(ret))/max(ret)* 100, Range = range(ret)) %>% arrange(desc(Range))
order <- cum_df %>% pull(Funds) %>% unique()
cum_df$Year <- as.Date(paste0(cum_df$Year, "-01-01"))
source("code/order.R")
plot <- cum_df %>%
plot_order(., Column = "Funds", Order = order) %>%
ggplot() +
geom_line(aes(Year, DD), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Funds) +
labs(x = "", y = " Max Drawdowns (%)", title = "Yearly Drawdowns", subtitle = "", caption = "Source:Bloomberg and\n Authors Calculations")
plot
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(gt)
library(tidyverse)
library(huxtable)
library(kableExtra)
library(xtable)
library(fmxdat)
pacman::p_load("TTR")
pacman::p_load("tidyr", "tbl2xts","devtools","lubridate", "readr", "PerformanceAnalytics", "ggplot2", "dplyr")
source("code/EXCESSRETURN.R")
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue", "zoo")
df<- readxl::read_xlsx("data/MAD .xlsx")
#  change the column names for ease of analysis
geographical_codenames <- c("UK_HY", "EM_HY", "UK", "EM", "UK_HY_B", "UK_B", "JP_HY", "EU", "US_HY", "US", "W_HY", "W", "EU_DG", "EU_2", "JP_DG", "US_DG", "US_2", "JP", "SA_DG", "SA", "SA_HY", "EU_HY", "W_HY", "W")
# always working with those indexes
colnames(df)[2:23] <- geographical_codenames
data <- readxl::read_xlsx("data/Index Description.xlsx")
data = data %>% tibble::as_tibble()
addtorow          <- list()
addtorow$pos      <- list()
addtorow$pos[[1]] <- c(0)
addtorow$command  <- c(paste("\\hline \n",
"\\endhead \n",
"\\hline \n",
"{\\footnotesize Continued on next page} \n",
"\\endfoot \n",
"\\endlastfoot \n",sep=""))
table <- xtable(data, caption = "Index Description \\label{indexdes}")
print.xtable(table,
tabular.environment = "longtable",
floating = FALSE, # Leave this as is.
table.placement = 'H', # Leave this as is.
booktabs = T, # Aesthetics
include.rownames = FALSE,  # Typically you don't want this in a table.
add.to.row = addtorow, # For adding the Continued on next page part...
comment = FALSE,
caption.placement = 'bottom',  # Where do you want the caption?
size="\\fontsize{8pt}{9pt}\\selectfont"  # Size of text in table..
)
source("code/Get_dat_1.R")
rm(list = ls()) # Clean your environment:
gc() # garbage collection - It can be useful to call gc after a large object has been removed, as this may prompt R to return memory to the operating system.
library(tidyverse)
library(glue)
p_load("RA")
df1 <- Get_dat(Loc, Loc2,Port = "Divi1",Which = c("Returns"))
df1 <- Get_dat_1(Loc, Loc2,Port = "Divi1",Which = c("Returns"))
#  lets get the cumulative returns
Loc <- "data/SatrixVol/"
Loc_2 <- "data/Capped_SWIX/"
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
df1 <- Get_dat_1(Loc, Loc2,Port = "Divi1",Which = c("Returns"))
#  lets get the cumulative returns
Loc <- "data/SatrixVol/"
Loc_2 <- "data/Capped_SWIX/"
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
df1 <- Get_dat(Loc, Loc2,Port = "Divi1",Which = c("Returns"))
#  lets get the cumulative returns
Loc <- "data/SatrixVol/"
Loc_2 <- "data/Capped_SWIX/"
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
df1 <- Get_dat(Loc, Loc_2,Port = "Divi1",Which = c("Returns"))
View(Get_dat)
df1 <- Get_dat(Loc, Loc_2,Port = "Divi1","Returns")
#  lets get the cumulative returns
Loc <- "J433_J406/Divi/"
Loc_2 <- "J433_J406/Divi/Capped_SWIX/"
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
df1 <- Get_dat(Loc, Loc_2,Port = "Divi1","Returns")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
#  lets get the cumulative returns
Loc <- "J433_J406/Divi/"
Loc_2 <- "J433_J406/Divi/Capped_SWIX/"
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
df1 <- Get_dat(Loc, Loc_2,Port = "Divi1","Returns")
#  lets get the cumulative returns
Loc <- "J433_J406/Divi/"
Loc_2 <- "J433_J406/Divi/Capped_SWIX/"
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
df1 <- Get_dat(Loc, Loc_2,Port = "Divi1","Returns")
source("~/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
#  lets get the cumulative returns
Loc <- "J433_J406/Divi/"
Loc_2 <- "J433_J406/Divi/Capped_SWIX/"
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/Get_dat_1.R")
source("/Users/gabrielrambanapasi/Desktop/Much Ado Dividends/Much-Ado-Dividends/Thesis/write up/code/EOM.R")
df1 <- Get_dat(Loc, Loc_2,Port = "Divi1","Returns")
df2 <- Get_dat(Loc,BM = BM,Unisel = Unisel,Nam = Nam,Port = "Divi2",Which = c("Ret"))
df1 <- Get_dat(Loc, Loc_2,Port = "Divi1","Returns")
df2 <- Get_dat(Loc, Loc_2,Port = "Divi2","Returns")
df3 <- Get_dat(Loc, Loc_2,Port = "Divi3","Returns")
df4 <- Get_dat(Loc, Loc_2,Port = "Divi4","Returns")
dfbm <- Get_dat(Loc, Loc_2,Port = "Divi1","Returns_BM")
df <- bind_rows(df1, df2, df3, df4, dfbm %>% rename(Returns = BM_Returns) %>% mutate(Portfolio = "BM")) %>% select(date, Portfolio, Returns)
bind_rows(df1, df2, df3, df4, dfbm %>% rename(Returns = BM_Returns) %>% mutate(Portfolio = "BM")) %>% select(date, Portfolio, Returns)
df <- bind_rows(df1, df2, df3, df4, dfbm %>% rename(Returns = BM_Returns) %>% mutate(Portfolio = "BM")) %>% select(date, Portfolio, Returns) %>% ungroup() %>% select(-YM)
bind_rows(df1, df2, df3, df4, dfbm %>% rename(Returns = BM_Returns) %>% mutate(Portfolio = "BM")) %>% select(date, Portfolio, Returns) %>% ungroup() %>% select(-YM)
df %>% mutate(ROI = cumprod(1+Returns), ROI = ROI/first(ROI))
df %>% mutate(ROI = cumprod(1+Returns), ROI = ROI/first(ROI)) %>% ggplot + geom_line(aes(date, ROI, color = Portfolio))
df %>% group_by(Portfolio) %>%  mutate(ROI = cumprod(1+Returns), ROI = ROI/first(ROI)) %>% ggplot + geom_line(aes(date, ROI, color = Portfolio))
# # get the top quartile and bottom quartile
strat_df <- vol_data %>% filter(index == "VIX") %>%  mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# loadings
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue", "zoo")
df<- readxl::read_xlsx("data/MAD .xlsx")
#  change the column names for ease of analysis
geographical_codenames <- c("UK_HY", "EM_HY", "UK", "EM", "UK_HY_B", "UK_B", "JP_HY", "EU", "US_HY", "US", "W_HY", "W", "EU_DG", "EU_2", "JP_DG", "US_DG", "US_2", "JP", "SA_DG", "SA", "SA_HY", "EU_HY", "W_HY", "W")
colnames(df)[2:23] <- geographical_codenames
library(kableExtra)
indexes <- readxl::read_xlsx("data/Index Description.xlsx")
kable(indexes)
source("code/EXCESSRETURN.R")
library(glue)
library(stats)
#   calculate simple returns just simple excess returns
a <- df %>% My_excess_return(., "UK_HY", "UK")
b <- df %>% My_excess_return(., "UK_HY_B", "UK_B")
c <- df %>% My_excess_return(., "US_HY", "US")
d <- df %>% My_excess_return(., "US_DG", "US_2")
e <- df %>% My_excess_return(., "EU_HY", "EU")
f <- df %>% My_excess_return(., "EU_DG", "EU_2")
g <- df %>% My_excess_return(., "JP_HY", "JP")
h <- df %>% My_excess_return(., "JP_DG", "JP")
i <- df %>% My_excess_return(., "EM_HY", "EM")
j <- df %>% My_excess_return(., "SA_HY", "SA")
k <- df %>% My_excess_return(., "SA_DG", "SA")
l <- df %>% My_excess_return(., "W_HY", "W")
# Table to describe excess returns
excess_return_df <- list( a, b, c, d, e,f,g,h,i,j,k, l) %>%
reduce(inner_join, by='date')
table_df <- excess_return_df %>%
gather(Regions, Cumulative_Excess_Return, -date) %>%
group_by(Regions) %>%
summarise("Start Date" = first(date) , "Total Years"  = round( n()/12,0),  Median = median(Cumulative_Excess_Return),  "Cumulative Excess Return" = last(Cumulative_Excess_Return))
table_df
#   get the vol data and get some dates
vol_data <- readxl::read_xlsx("data/volatility for indexes.xlsx") %>% gather(index, px , -Date) %>%
mutate(ret = px/lag(px)-1, RollSD = RcppRoll::roll_sd(1 + ret, 12, fill = NA, align = "right") *
sqrt(12)) %>%
filter(!is.na(RollSD))
# # get the top quartile and bottom quartile
strat_df <- vol_data %>% filter(index == "VIX") %>%  mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
# # US strat
hivol_per_vector_us <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_us <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# UK
strat_df <-vol_data %>% filter(index == "IVIUK") %>% mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_uk  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_uk  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#  EU
strat_df <-vol_data %>% filter(index == "V2X") %>% mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_eu  <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_eu  <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
# # SA
strat_df <-vol_data %>% filter(index == "SAVIT40") %>% mutate(topQ = quantile(RollSD, probs = 0.95),
botQ = quantile(RollSD, probs = 0.05),
Strat = ifelse(RollSD >= topQ, "HiVol",
ifelse(RollSD <= botQ, "LowVol", "Normal_Vol")))
#
hivol_per_vector_sa <- strat_df %>% filter(Strat %in% "HiVol") %>% pull(Date)
lovol_per_vector_sa <- strat_df %>% filter(Strat %in% "LowVol") %>% pull(Date)
#  High Vol df
source("code/Stratifier.R")
stratifying_df <-  bind_rows(
stratifier(df, "EU_HY", "EU", hivol_per_vector_eu, "High Vol" ),
stratifier(df, "EU_DG", "EU_2", hivol_per_vector_eu, "High Vol" ),
stratifier(df, "UK_HY", "UK", hivol_per_vector_eu, "High Vol" ),
stratifier(df, "UK_HY_B", "UK", hivol_per_vector_eu, "High Vol"),
stratifier(df, "JP_HY", "JP", hivol_per_vector_us, "High Vol"),
stratifier(df, "JP_DG", "JP", hivol_per_vector_us, "High Vol"),
stratifier(df, "EM_HY", "EM", hivol_per_vector_us, "High Vol"),
stratifier(df, "SA_HY", "SA", hivol_per_vector_sa, "High Vol"),
stratifier(df, "SA_DG", "SA", hivol_per_vector_sa, "High Vol"),
stratifier(df, "US_HY", "US", hivol_per_vector_us, "High Vol"),
stratifier(df, "US_DG", "US", hivol_per_vector_us, "High Vol"),
stratifier(df , "W_HY", "W", hivol_per_vector_us, "High Vol"),
stratifier(df, "EU_HY", "EU", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "EU_DG", "EU_2", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "UK_HY", "UK", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "UK_HY_B", "UK", lovol_per_vector_eu, "Low Vol Period" ),
stratifier(df, "JP_HY", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "JP_DG", "JP", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "EM_HY", "EM", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "SA_HY", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "SA_DG", "SA", lovol_per_vector_sa, "Low Vol Period" ),
stratifier(df, "US_HY", "US", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "US_DG", "US", lovol_per_vector_us, "Low Vol Period" ),
stratifier(df, "W_HY", "W", lovol_per_vector_us, "Low Vol Period")
)
stratifying_df %>% arrange(Name)
rate_data <- readxl::read_xlsx("data/Policy Rates.xlsx")
names <- c("Date", "US", "UK", "JP", "ECB", "SA")
colnames(rate_data) <- names
US_rates <- rate_data %>% select(Date, US)
UK_rates <- rate_data %>% select(Date, UK)
JP_rates <- rate_data %>% select(Date, JP)
SA_rates <- rate_data %>% select(Date, SA)
ECB_rates <- rate_data %>% select(Date, ECB)
# Get Rates for the US
source("code/Interest_Regime.R")
source("code/Stratifier_rates.R")
#  rename the columns for the function to work
Regime_df <- Regime_change_df(US_rates, "US", 5)
Hiking_date_vector_us <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_us <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_us <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(UK_rates, "UK", 5)
Hiking_date_vector_uk <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_uk <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_uk <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(JP_rates, "JP", 5)
Hiking_date_vector_jp <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_jp <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_jp <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(SA_rates, "SA", 5)
Hiking_date_vector_sa <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_sa <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_sa <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
Regime_df <- Regime_change_df(ECB_rates, "ECB", 5)
Hiking_date_vector_eu <- Regime_df %>% filter(regime %in% "Hiking") %>% pull(Date)
Cutting_date_vector_eu <- Regime_df %>% filter(regime %in% "Cutting") %>% pull(Date)
Neutral_date_vector_eu <- Regime_df %>% filter(regime %in% "Neutral") %>% pull(Date)
# Hiking Performance
Hiking_performance <-  bind_rows(
stratifier_rates(df, "EU_HY", "EU", Hiking_date_vector_eu, "Hiking" ),
stratifier_rates(df, "EU_DG", "EU_2", Hiking_date_vector_eu, "Hiking" ),
stratifier_rates(df, "UK_HY", "UK", Hiking_date_vector_uk, "Hiking" ),
stratifier_rates(df, "UK_HY_B", "UK", Hiking_date_vector_uk, "Hiking" ),
stratifier_rates(df, "EM_HY", "EM", Hiking_date_vector_us, "Hiking"),
stratifier_rates(df, "SA_HY", "SA", Hiking_date_vector_sa, "Hiking" ),
stratifier_rates(df, "SA_DG", "SA", Hiking_date_vector_sa, "Hiking" ),
stratifier_rates(df, "US_HY", "US", Hiking_date_vector_us, "Hiking" ),
stratifier_rates(df, "US_DG", "US", Hiking_date_vector_us, "Hiking" )
)
#  Cutting Perfromance
Cutting_performance <-  bind_rows(
stratifier_rates(df, "EU_HY", "EU", Cutting_date_vector_eu, "Cut" ),
stratifier_rates(df, "EU_DG", "EU_2", Cutting_date_vector_eu, "Cut" ),
stratifier_rates(df, "UK_HY", "UK", Cutting_date_vector_uk, "Cut" ),
stratifier_rates(df, "UK_HY_B", "UK", Cutting_date_vector_uk, "Cut" ),
stratifier_rates(df, "EM_HY", "EM", Cutting_date_vector_us, "Cut"),
stratifier_rates(df, "SA_HY", "SA", Cutting_date_vector_sa, "Cut" ),
stratifier_rates(df, "SA_DG", "SA", Cutting_date_vector_sa, "Cut" ),
stratifier_rates(df, "US_HY", "US", Cutting_date_vector_us, "Cut" ),
stratifier_rates(df, "US_DG", "US", Cutting_date_vector_us, "Cut" )
)
# Nuetral
Nuetral_perfromance <-  bind_rows(
stratifier_rates(df, "EU_HY", "EU", Neutral_date_vector_eu, "Neutral" ),
stratifier_rates(df, "EU_DG", "EU_2", Neutral_date_vector_eu, "Neutral" ),
stratifier_rates(df, "UK_HY", "UK", Neutral_date_vector_uk, "Neutral" ),
stratifier_rates(df, "UK_HY_B", "UK", Neutral_date_vector_uk, "Neutral" ),
stratifier_rates(df, "JP_HY", "JP", Neutral_date_vector_jp, "Neutral" ),
stratifier_rates(df, "JP_DG", "JP", Neutral_date_vector_jp, "Neutral" ),
stratifier_rates(df, "EM_HY", "EM", Neutral_date_vector_us, "Neutral"),
stratifier_rates(df, "SA_HY", "SA", Neutral_date_vector_sa, "Neutral" ),
stratifier_rates(df, "SA_DG", "SA", Neutral_date_vector_sa, "Neutral" ),
stratifier_rates(df, "US_HY", "US", Neutral_date_vector_us, "Neutral" ),
stratifier_rates(df, "US_DG", "US", Neutral_date_vector_us, "Neutral" )
)
CB_df <- bind_rows(Nuetral_perfromance,
Cutting_performance, Hiking_performance) %>% arrange(Name)
CB_df %>% rename(Quarters = "Months") %>% arrange(desc("Annualized Return"))
#  need to aggregate that into a single number
#  source
source("code/InformationRatioRoll.R")
a <-  df %>% Information_Ratio_Roll(., "EU_HY", "EU", 20030808, 36)
b <-  df %>% Information_Ratio_Roll(., "EU_DG", "EU_2",20030808, 36)
c <- df %>% Information_Ratio_Roll(., "UK_HY", "UK", 20030808, 36)
d <- df %>% Information_Ratio_Roll(., "UK_HY_B", "UK", 20030808, 36)
e <- df %>% Information_Ratio_Roll(., "JP_HY", "JP", 20030808, 36)
f <- df %>% Information_Ratio_Roll(., "JP_DG", "JP", 20030808, 36)
g <- df %>% Information_Ratio_Roll(., "EM_HY", "EM", 20030808, 36)
h <- df %>% Information_Ratio_Roll(., "SA_HY", "SA", 20030808, 36)
i <- df %>% Information_Ratio_Roll(., "SA_DG", "SA", 20030808, 36)
j <- df %>% Information_Ratio_Roll(., "US_HY", "US", 20030808, 36)
k <- df %>% Information_Ratio_Roll(., "US_DG", "US_2", 20030808, 36)
consistency_df <- list(a, b, c, d, e,f,g,h,i,j,k) %>%
reduce(inner_join, by='date') %>%
gather(IR , ret, -date)
plot <- consistency_df %>%   ggplot() +
geom_line(aes(date, ret), color = "steelblue", size = 1.1, alpha = 0.8) +
geom_hline(yintercept = 0, color = "red", size = 0.3, alpha = 0.5)+
fmxdat::theme_fmx() +
facet_wrap(~IR) +
labs(x = "", y = "Information Ratio", title = "Performance Consistency", subtitle = "Deeply Inconcsistent", caption = "Source:Bloomberg and\n Authors Calculations")
plot
# lets get cumulative returns for our dividend strategies and Max drawdowns
cum_df <- excess_return_df %>%
gather(Funds, ret, -date) %>% mutate(Year = format(date, "%Y")) %>% group_by(Year, Funds) %>% summarize(DD = (max(ret) - min(ret))/max(ret)* 100, Range = range(ret)) %>% arrange(desc(Range))
order <- cum_df %>% pull(Funds) %>% unique()
cum_df$Year <- as.Date(paste0(cum_df$Year, "-01-01"))
source("code/order.R")
plot <- cum_df %>%
plot_order(., Column = "Funds", Order = order) %>%
ggplot() +
geom_line(aes(Year, DD), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Funds) +
labs(x = "", y = " Max Drawdowns (%)", title = "Yearly Drawdowns", subtitle = "", caption = "Source:Bloomberg and\n Authors Calculations")
plot
# lets get returns for the index versus those for the benchmark
df %>%
mutate_at(2:23, list(~ ((.))/lag(.)-1)) %>% gather(index, ret, -Date)
# create a data frame with the two varaibeles that you are interested in
