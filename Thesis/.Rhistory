gather(Stock, Quarterly_vol, -date) %>% mutate(date = as.Date(date))
vol_quarterly %>%  ggplot() +
geom_line(aes(date, CVaR), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Country) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue", "extrafont")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
facet_wrap(~Index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
facet_wrap(~index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
facet_wrap(~Stock) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::Mean.arithmetic(.) ) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>% mutate(date = as.Date(date))
vol_quarterly <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::mean.geometric(.) ) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>% mutate(date = as.Date(date))
mean_return <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level, spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = TRUE, maxgap = 5) %>%
xts::apply.quarterly(., FUN = function(x) mean(x)) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>%
mutate(date = as.Date(date))
mean_return
data
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level, spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
xts::apply.quarterly(., FUN = function(x) mean(x)) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>%
mutate(date = as.Date(date))
data <- readxl::read_xlsx("data/MAD Dividend index series-2.xlsx")
if (!require("rmsfuns")) install.packages("rmsfuns")
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
d1 <-
data %>%
arrange(Date) %>%
mutate_at(.vars = vars(-Date), ~log(.)-log(lag(.)))
d2 <- data %>%
gather(Index, Value, -Date) %>%
mutate(Return = Value/lag(Value)-1) %>%
ungroup()
Year_Month <- function(x) format(as.Date(x), "%Y_%B")
cumdata_Logret_Monthly <-
cumdata %>%
arrange(Date) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
group_by(YM) %>% filter(Date == last(Date)) %>%
ungroup() %>%
mutate(across(.cols = where(is.numeric), .fns = ~log(.) - lag(log(.)))) %>%
filter(Date > first(Date)) %>% mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
# Now we can sum to get to annual returns:
summarise(across(.cols = where(is.numeric), .fns = ~sum(.)))
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
d2 <- data %>%
arrange(Date) %>%
mutate(YM = Year_Month(Date)) %>%
gather(index, value, -Date) %>%
group_by(index)
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
d2
d2$value <- as.numeric(d2$value)
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
compounded_returns
compounded_returns %>% ggplot(., aes(Date, dailyIndex, color = index, group = index))+
geomline()+
compounded_returns %>% ggplot(., aes(Date, dailyIndex, color = index, group = index))+
geomline()+
facet_wrap(~index)
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
facet_wrap(~ index)
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
facet_wrap(~ index) +
theme(legend.position = "none")
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
# facet_wrap(~ index) +
theme(legend.position = "none")
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
# # facet_wrap(~ index) +
# theme(legend.position = "none")
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line()
#  These are just the normal componded returns
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date) & index == FUDP) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dai
#  These are just the normal componded returns
compounded_returns <- d2 %>%
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date) & index == FUDP) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dai
compounded_returns <- d2 %>%
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date) & index == FUDP) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
compounded_returns %>% names
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
compounded_returns
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
"lubridate", "glue")
library(tbl2xts)
library(tidyverse)
library(xts)
compounded_returns %>% xts::tbl_xts(., cols_to_xts = dailyIndex, spread_by = index)
compounded_returns %>% tbl_xts(., cols_to_xts = dailyIndex, spread_by = index)
View(data)
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
library(tbl2xts)
library(tidyverse)
library(xts)
# Load the data
raw.indexes <- readxl::read_xlsx("data/Benckmarks.xlsx")
# Tidy the data and get simple returns
raw.indexes %>% arrange(Date)
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%Y%B"))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y"))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date)
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group(Index)
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index)
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Daily_return = Level/ lag(Level))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),  # Convert Level column to numeric
Daily_return = Level / lag(Level))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound = cumprod(1+ Daily_return)) %>%
group_by(MY)
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound = cumprod(1+ Daily_return))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound = cumprod(1+ Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group(MY) %>%
filter(Date == last(Date))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound = cumprod(1+ Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1+ Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1+ Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index/lag(Compound_index))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1+ Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index/lag(Compound_index)) %>%
select(Date, Monthly_return)
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daliy_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1+ Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index/lag(Compound_index))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level))
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daily_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1 + Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index / lag(Compound_index, default = 1))
compoond.returns <- raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daily_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1 + Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index / lag(Compound_index, default = 1))
compoond.returns
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daily_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1 + Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index / lag(Compound_index, default = 1)) %>% select(Date, Index, Monthly_return)
compoond.returns <- raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daily_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1 + Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index / lag(Compound_index, default = 1)) %>%
select(Date, Index, Monthly_return)
compoond.returns <- raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daily_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1 + Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index / lag(Compound_index, default = 1))
compoond.returns%>%
select(Date, Index, Monthly_return)
compoond.returns%>%
select(Date, Index, Monthly_return)
raw.indexes %>%
arrange(Date) %>%
mutate(MY = format(Date, "%b%Y")) %>%
gather(Index, Level, -Date) %>%
group_by(Index) %>%
mutate(Level = as.numeric(Level),
Daily_return = Level / lag(Level)) %>%
mutate(Daily_return = coalesce(Daily_return, 0)) %>%
mutate(Compound_index = cumprod(1 + Daily_return)) %>%
mutate(MY = format(Date, "%b%Y")) %>%
group_by(MY) %>%
filter(Date == last(Date)) %>%
mutate(Monthly_return = Compound_index / lag(Compound_index, default = 1))
compoond.returns%>%
select(Date, Index, Monthly_return)
compoond.returns
compoond.returns <- compoond.returns %>%
select(Date, Index, Monthly_return)
compoond.returns
compoond.returns %>%  ggplot(., aes(x = Date, y = Monthly_return, group = Index )) +
geom_line(aes(y = Monthly_return * 100, color = Index), size = 1, linetype = "dashed") +
labs(x = "Date", y = "Value", title = "Compound Index and Monthly Return") +
scale_color_discrete(name = "Instrument") +
scale_linetype_manual(values = c("solid", "dashed")) +
facet_wrap(~ MY, ncol = 4) +
theme_minimal()
compoond.returns %>% ggplot(., aes(x = Date, y = Monthly_return, group = Index)) +
geom_line(aes(y = Monthly_return * 100), size = 1, linetype = "dashed") +
labs(x = "Date", y = "Value", title = "Compound Index and Monthly Return") +
scale_linetype_manual(values = c("solid", "dashed")) +
facet_wrap(~ MY) +
theme_minimal()
compoond.returns %>% ggplot(., aes(x = Date, y = Monthly_return, group = Index)) +
geom_line(aes(y = Monthly_return * 100), size = 1, linetype = "dashed") +
labs(x = "Date", y = "Value", title = "Compound Index and Monthly Return") +
scale_linetype_manual(values = c("solid", "dashed")) +
facet_wrap(~ Index) +
theme_minimal()
compoond.returns %>% ggplot(., aes(x = Date, y = Monthly_return, group = Index)) +
geom_line() +
labs(x = "Date", y = "Value", title = "Compound Index and Monthly Return") +
scale_linetype_manual(values = c("solid", "dashed")) +
facet_wrap(~ Index) +
theme_minimal()
compoond.returns %>% ggplot(., aes(x = Date, y = Monthly_return) +
geom_line() +
labs(x = "Date", y = "Value", title = "Compound Index and Monthly Return") +
scale_linetype_manual(values = c("solid", "dashed")) +
facet_wrap() +
theme_minimal()
compoond.returns %>% ggplot(., aes(x = Date, y = Monthly_return) +
compoond.returns %>%
ggplot()+
geom_line(., aes(x= Date, y = Monthly_Return))
compoond.returns %>%
ggplot(., aes(x= Date, y = Monthly_Return))
compoond.returns
compoond.returns %>%
ggplot(., aes(x= Date, y = Monthly_return))+
geom_line()
compoond.returns %>%
ggplot(., aes(x= Date, y = Monthly_return, group = Index))+
geom_line()
