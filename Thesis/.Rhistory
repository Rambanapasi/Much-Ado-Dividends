filter(Date == last(Date)) %>%
group_by(Index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1)
d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1)
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
View(d2)
d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Year_Month, index, dailyIndex)
d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(YM, index, dailyIndex)
d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
data <- readxl::read_xlsx("data/MAD Dividend index series-2.xlsx")
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
data <- readxl::read_xlsx("data/MAD Dividend index series-2.xlsx")
xts.data <- xts_tbl(data)
xts.data <- tbl_xts(data)
xts.data["2020"]
xts.data["2019-3/2021-4"]
covid_hyper_data <- xts.data["2019-3/2021-4"]
xts.data[.indexwday(xts.data) == 5]
data %>% names
data %>% names %>%  unique
plot(xts.data[, "TJDIVD"], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "Levels")
# Plotting with default lables is simple
plot(covid_hyper_data[, "TJDIVD"], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "Levels")
interest <- c("GDDUK", "M2JPDY")
plot(covid_hyper_data[, intrest], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "Levels")
# Plotting with default lables is simple
plot(covid_hyper_data[, interest], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "Levels")
interest <- c("GDDUK", "M2JPDY")
plot(xts.data[, interest], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "Levels")
interest <- c("GDDUK")
plot(xts.data[, interest], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "Levels")
plot(xts.data[, "FUDP"], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "Levels")
plot(xts.data[, "FUDP"], major.ticks = "years", minor.ticks = FALSE,
main = "", col = 3, ylab = "")
xts.data.padded <- na.locf(xts.data, na.rm = F, maxgap = 5)
xts.data.padded
xts.data.padded <- na.locf(xts.data, na.rm = F, maxgap = 100)
xts.data.padded <- na.locf(xts.data, na.rm = F, maxgap = 10000)
xts.data.padded.monthly <- xts.data.padded[endpoints(xts.data.padded,
"months", k = 3)]
xts.data.padded.monthly
periodicity(xts.data.padded.monthly)
periodicity(xts.data.padded.monthly)
data
data %>%
arrange(Date) %>%
gather(index, level, -date)
data %>%
arrange(Date) %>%
gather(index, level, -Date)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>% coalesce(level)
data %>%
arrange(Date) %>%
gather(index, level, -Date)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(.)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., spread_by = levels, cols_to_xts = index)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., spread_by = level, cols_to_xts = index)
data %>%
arrange(Date) %>%
gather(index, level, -Date)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(.,cols_to_xts = index, spread_name_pos = level)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(.,cols_to_xts = index, spread_by = level)
data %>%
arrange(Date) %>%
gather(index, level, -Date)
df <- data %>%
arrange(Date) %>%
gather(index, level, -Date)
df %>%
tbl_xts(.,cols_to_xts = index, spread_by = level)
df <- data %>%
arrange(Date) %>%
gather(index, level, -Date)
periodicity(xts.data.padded.monthly)
periodicity(xts.data.padded.monthly)
periodicity(xts.data.padded.monthly)
data %>%
arrange(Date) %>%
gather(index, level, -Date)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., spread_by = level)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
group_by(index) %>%
# tbl_xts(., spread_by = level) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
tbl_xts() %>%
gather(Stock, SD, -Date)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
group_by(index)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
tbl_xts() %>%
gather(Stock, Monthly_returns, -Date)
df <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
tbl_xts() %>%
gather(Stock, Monthly_returns, -Date)
df
xts.data.padded.monthly <- xts.data.padded[endpoints(xts.data.padded,
"months", k = 3)]
df <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
tbl_xts() %>%
gather(Stock, Monthly_returns, -Date)
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log")
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
df <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
xts_tbl() %>%
gather(Stock, Monthly_returns, -Date) %>% mutate(date = as.Date(date))
data
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
xts_tbl() %>%
gather(Stock, Monthly_returns, -Date) %>% mutate(date = as.Date(date))
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
xts_tbl()
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
xts_tbl() %>%
gather(Stock, Monthly_returns, -date) %>% mutate(date = as.Date(Date))
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
xts_tbl() %>%
gather(Stock, Monthly_returns, -date) %>% mutate(date = as.Date(date))
vol_quarterly <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::sd.annualized ) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>% mutate(date = as.Date(date))
vol_quarterly %>%  ggplot() +
geom_line(aes(date, CVaR), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Country) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue", "extrafont")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
fmxdat::theme_fmx() +
facet_wrap(~Index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
facet_wrap(~Index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
facet_wrap(~index) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly
vol_quarterly %>%  ggplot() +
geom_line(aes(date, Quarterly_vol), color = "steelblue", size = 1.1, alpha = 0.8) +
facet_wrap(~Stock) +
labs(x = "", title = "CVaR Plot example", subtitle = "Using tbl2xts package")
vol_quarterly <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::Mean.arithmetic(.) ) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>% mutate(date = as.Date(date))
vol_quarterly <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level,  spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = T, maxgap = 5) %>%
xts::apply.quarterly(., FUN = PerformanceAnalytics::mean.geometric(.) ) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>% mutate(date = as.Date(date))
mean_return <- data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level, spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
na.locf(., na.rm = TRUE, maxgap = 5) %>%
xts::apply.quarterly(., FUN = function(x) mean(x)) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>%
mutate(date = as.Date(date))
mean_return
data
data %>%
arrange(Date) %>%
gather(index, level, -Date) %>%
tbl_xts(., cols_to_xts = level, spread_by = index) %>%
PerformanceAnalytics::CalculateReturns(., method = "log") %>%
xts::apply.quarterly(., FUN = function(x) mean(x)) %>%
xts_tbl() %>%
gather(Stock, Quarterly_vol, -date) %>%
mutate(date = as.Date(date))
data <- readxl::read_xlsx("data/MAD Dividend index series-2.xlsx")
if (!require("rmsfuns")) install.packages("rmsfuns")
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
d1 <-
data %>%
arrange(Date) %>%
mutate_at(.vars = vars(-Date), ~log(.)-log(lag(.)))
d2 <- data %>%
gather(Index, Value, -Date) %>%
mutate(Return = Value/lag(Value)-1) %>%
ungroup()
Year_Month <- function(x) format(as.Date(x), "%Y_%B")
cumdata_Logret_Monthly <-
cumdata %>%
arrange(Date) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
group_by(YM) %>% filter(Date == last(Date)) %>%
ungroup() %>%
mutate(across(.cols = where(is.numeric), .fns = ~log(.) - lag(log(.)))) %>%
filter(Date > first(Date)) %>% mutate(Year = format(Date, "%Y")) %>%
group_by(Year) %>%
# Now we can sum to get to annual returns:
summarise(across(.cols = where(is.numeric), .fns = ~sum(.)))
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
d2 <- data %>%
arrange(Date) %>%
mutate(YM = Year_Month(Date)) %>%
gather(index, value, -Date) %>%
group_by(index)
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
d2
d2$value <- as.numeric(d2$value)
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
compounded_returns
compounded_returns %>% ggplot(., aes(Date, dailyIndex, color = index, group = index))+
geomline()+
compounded_returns %>% ggplot(., aes(Date, dailyIndex, color = index, group = index))+
geomline()+
facet_wrap(~index)
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
facet_wrap(~ index)
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
facet_wrap(~ index) +
theme(legend.position = "none")
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
# facet_wrap(~ index) +
theme(legend.position = "none")
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line() +
# # facet_wrap(~ index) +
# theme(legend.position = "none")
compounded_returns %>%
ggplot(aes(Date, dailyIndex, color = index, group = index)) +
geom_line()
#  These are just the normal componded returns
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date) & index == FUDP) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dai
#  These are just the normal componded returns
compounded_returns <- d2 %>%
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date) & index == FUDP) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dai
compounded_returns <- d2 %>%
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date) & index == FUDP) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
compounded_returns %>% names
compounded_returns <- d2 %>%
mutate(YM = Year_Month(Date)) %>%
mutate(dailyReturn = value/lag(value) - 1) %>%
filter(Date >= lubridate::ymd(20130128)) %>%
# coalesce returns NULL or NA
mutate(daliyReturn = coalesce(dailyReturn, 0)) %>%
mutate(dailyIndex = cumprod(1 + dailyReturn)) %>%
group_by(YM) %>%
filter(Date == last(Date)) %>%
group_by(index) %>%
mutate(MonthlyReturn = dailyIndex/lag(dailyIndex) - 1) %>%
select(Date, index, dailyIndex)
compounded_returns
pacman::p_load("xts", "tidyverse", "tbl2xts", "PerformanceAnalytics",
"lubridate", "glue")
"lubridate", "glue")
library(tbl2xts)
library(tidyverse)
library(xts)
compounded_returns %>% xts::tbl_xts(., cols_to_xts = dailyIndex, spread_by = index)
compounded_returns %>% tbl_xts(., cols_to_xts = dailyIndex, spread_by = index)
View(data)
